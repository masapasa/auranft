"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAndParseFiles = exports.generateLockfileObject = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const lock = __importStar(require("@yarnpkg/lockfile"));
const chalk_1 = __importDefault(require("chalk"));
const logger_1 = require("./logger");
const getDependencyKey = (key, version) => `${key}@${version}`;
const generateLockfileObject = (dependencies, parsedLockfile, foundDependencies = {}) => {
    for (const key of Object.keys(dependencies)) {
        const version = dependencies[key];
        const dependencyKey = getDependencyKey(key, version);
        if (dependencyKey in foundDependencies) {
            logger_1.log(chalk_1.default.yellow('Dependency already resolved'), chalk_1.default.blue(dependencyKey));
            continue;
        }
        // Add the dependency
        if (!(dependencyKey in parsedLockfile)) {
            logger_1.log(chalk_1.default.red(`Could not find: ${dependencyKey}`));
            throw new Error(`Could not find: ${dependencyKey}`);
        }
        const dependencyFromLockfile = parsedLockfile[dependencyKey];
        foundDependencies[dependencyKey] = dependencyFromLockfile;
        // Get any dependencies under this dependency
        if (dependencyFromLockfile.dependencies || dependencyFromLockfile.optionalDependencies) {
            exports.generateLockfileObject(Object.assign(Object.assign({}, dependencyFromLockfile.dependencies), dependencyFromLockfile.optionalDependencies), parsedLockfile, foundDependencies);
        }
    }
    return foundDependencies;
};
exports.generateLockfileObject = generateLockfileObject;
const getAndParseFiles = (lockFilePath, packageFilePath) => {
    logger_1.log(chalk_1.default.whiteBright('Lockfile:'), chalk_1.default.green(lockFilePath));
    logger_1.log(chalk_1.default.whiteBright('Package.json:'), chalk_1.default.green(packageFilePath));
    const lockfileString = fs.readFileSync(path.resolve(lockFilePath), 'utf8');
    const inputLockfile = lock.parse(lockfileString);
    const inputPackageJson = JSON.parse(fs.readFileSync(path.resolve(packageFilePath), 'utf8'));
    return {
        inputLockfile,
        inputPackageJson
    };
};
exports.getAndParseFiles = getAndParseFiles;
//# sourceMappingURL=generator.js.map