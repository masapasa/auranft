"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const lock = __importStar(require("@yarnpkg/lockfile"));
const chalk_1 = __importDefault(require("chalk"));
const commander_plus_1 = __importDefault(require("commander-plus"));
const package_json_1 = __importDefault(require("../package.json"));
const logger_1 = require("./logger");
const generator_1 = require("./generator");
commander_plus_1.default
    .version(package_json_1.default.version)
    .usage('--package <package> --lockfile <lockfile> [options]')
    .option('-p, --package <package>', 'package.json path')
    .option('-l, --lockfile <lockfile>', 'yarn.lock path')
    .option('-v, --verbose [verbose]', 'Log details')
    .option('-f, --force [force]', 'Overwrite lockfile')
    .option('-d, --dev [dev]', 'Include devDependencies', false)
    .option('-w, --write [write]', 'Write lockfile')
    .parse(process.argv);
let missingRequiredArg = false;
const printMissingArg = (details) => console.error(chalk_1.default.red('Missing argument:'), details);
if (!commander_plus_1.default.package) {
    printMissingArg('-p --package <package>');
    missingRequiredArg = true;
}
if (!commander_plus_1.default.lockfile) {
    printMissingArg('-l --lockfile <lockfile>');
    missingRequiredArg = true;
}
if (missingRequiredArg) {
    commander_plus_1.default.help();
}
logger_1.setVerbose(commander_plus_1.default.verbose);
try {
    const { inputLockfile, inputPackageJson } = generator_1.getAndParseFiles(commander_plus_1.default.lockfile, commander_plus_1.default.package);
    logger_1.log('Using dev:', chalk_1.default.cyan(commander_plus_1.default.dev));
    const lockfileObject = generator_1.generateLockfileObject(Object.assign(Object.assign({}, inputPackageJson.dependencies), (commander_plus_1.default.dev ? inputPackageJson.devDependencies : {})), inputLockfile.object);
    if (commander_plus_1.default.write) {
        const lockWritePath = commander_plus_1.default.write === true ? 'yarn.lock' : commander_plus_1.default.write;
        const fileExists = fs.existsSync(lockWritePath);
        if (fileExists && !commander_plus_1.default.force) {
            console.error('Lockfile already exists at:', chalk_1.default.red(lockWritePath), `(Use --force to overwrite)`);
            process.exit(1);
        }
        if (commander_plus_1.default.force && fileExists) {
            console.log(chalk_1.default.yellow('Overwriting:'), chalk_1.default.red(lockWritePath));
        }
        console.log(chalk_1.default.yellow('Lockfile written to:'), chalk_1.default.blue(lockWritePath));
        fs.writeFileSync(path.resolve(lockWritePath), lock.stringify(lockfileObject));
    }
    else {
        console.log(lock.stringify(lockfileObject));
    }
}
catch (err) {
    console.error('Error:', chalk_1.default.red(err));
    process.exit(1);
}
//# sourceMappingURL=entry.js.map