"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PubKeySecp256k1 = exports.PrivKeySecp256k1 = void 0;
const elliptic_1 = require("elliptic");
const crypto_js_1 = __importDefault(require("crypto-js"));
const buffer_1 = require("buffer/");
const hash_1 = require("./hash");
class PrivKeySecp256k1 {
    constructor(privKey) {
        this.privKey = privKey;
    }
    static generateRandomKey() {
        const secp256k1 = new elliptic_1.ec("secp256k1");
        return new PrivKeySecp256k1(buffer_1.Buffer.from(secp256k1.genKeyPair().getPrivate().toArray()));
    }
    toBytes() {
        return new Uint8Array(this.privKey);
    }
    getPubKey() {
        const secp256k1 = new elliptic_1.ec("secp256k1");
        const key = secp256k1.keyFromPrivate(this.privKey);
        return new PubKeySecp256k1(new Uint8Array(key.getPublic().encodeCompressed("array")));
    }
    /**
     * @deprecated Use `signDigest32(Hash.sha256(data))` instead.
     * @param msg
     */
    sign(msg) {
        return this.signDigest32(hash_1.Hash.sha256(msg));
    }
    signDigest32(digest) {
        if (digest.length !== 32) {
            throw new Error(`Invalid length of digest to sign: ${digest.length}`);
        }
        const secp256k1 = new elliptic_1.ec("secp256k1");
        const key = secp256k1.keyFromPrivate(this.privKey);
        const signature = key.sign(digest, {
            canonical: true,
        });
        return new Uint8Array(signature.r.toArray("be", 32).concat(signature.s.toArray("be", 32)));
    }
}
exports.PrivKeySecp256k1 = PrivKeySecp256k1;
class PubKeySecp256k1 {
    constructor(pubKey) {
        this.pubKey = pubKey;
    }
    toBytes() {
        return new Uint8Array(this.pubKey);
    }
    getAddress() {
        let hash = crypto_js_1.default.SHA256(crypto_js_1.default.lib.WordArray.create(this.pubKey)).toString();
        hash = crypto_js_1.default.RIPEMD160(crypto_js_1.default.enc.Hex.parse(hash)).toString();
        return new Uint8Array(buffer_1.Buffer.from(hash, "hex"));
    }
    toKeyPair() {
        const secp256k1 = new elliptic_1.ec("secp256k1");
        return secp256k1.keyFromPublic(buffer_1.Buffer.from(this.pubKey).toString("hex"), "hex");
    }
    /**
     * @deprecated Use `verifyDigest32(Hash.sha256(data))` instead.
     * @param msg
     */
    verify(msg, signature) {
        return this.verifyDigest32(hash_1.Hash.sha256(msg), signature);
    }
    verifyDigest32(digest, signature) {
        if (digest.length !== 32) {
            throw new Error(`Invalid length of digest to verify: ${digest.length}`);
        }
        if (signature.length !== 64) {
            throw new Error(`Invalid length of signature: ${signature.length}`);
        }
        const secp256k1 = new elliptic_1.ec("secp256k1");
        const r = signature.slice(0, 32);
        const s = signature.slice(32);
        return secp256k1.verify(digest, {
            r: buffer_1.Buffer.from(r).toString("hex"),
            s: buffer_1.Buffer.from(s).toString("hex"),
        }, this.toKeyPair());
    }
}
exports.PubKeySecp256k1 = PubKeySecp256k1;
//# sourceMappingURL=key.js.map