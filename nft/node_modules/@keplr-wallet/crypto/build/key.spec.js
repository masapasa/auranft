"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mnemonic_1 = require("./mnemonic");
const key_1 = require("./key");
const hash_1 = require("./hash");
describe("Test priv key", () => {
    it("priv key should generate the valid pub key", () => {
        const mnemonic = "celery husband drama unaware blue empower jelly twist program say prepare page";
        const privKey = new key_1.PrivKeySecp256k1(mnemonic_1.Mnemonic.generateWalletFromMnemonic(mnemonic));
        const pubKey = privKey.getPubKey();
        expect(pubKey.toBytes()).toStrictEqual(new Uint8Array([
            2,
            57,
            75,
            197,
            54,
            51,
            54,
            106,
            42,
            185,
            181,
            214,
            151,
            169,
            76,
            140,
            1,
            33,
            204,
            94,
            63,
            13,
            85,
            74,
            99,
            22,
            126,
            219,
            49,
            140,
            234,
            232,
            188,
        ]));
    });
    it("priv key should generate the valid signature", () => {
        const privKey = key_1.PrivKeySecp256k1.generateRandomKey();
        const pubKey = privKey.getPubKey();
        const data = new Uint8Array([1, 2, 3]);
        const signature = privKey.signDigest32(hash_1.Hash.sha256(data));
        expect(signature).toStrictEqual(privKey.sign(data));
        expect(pubKey.verify(data, signature)).toBe(true);
        expect(pubKey.verifyDigest32(hash_1.Hash.sha256(data), signature)).toBe(true);
    });
    it("test assertions", () => {
        const privKey = key_1.PrivKeySecp256k1.generateRandomKey();
        const pubKey = privKey.getPubKey();
        expect(() => {
            // Not 32 bytes hash
            privKey.signDigest32(new Uint8Array([1, 2, 3]));
        }).toThrow();
        expect(() => {
            // Not 32 bytes hash
            pubKey.verifyDigest32(new Uint8Array([1, 2, 3]), new Uint8Array(64));
        }).toThrow();
        expect(() => {
            // Not 64 bytes signature
            pubKey.verifyDigest32(hash_1.Hash.sha256(new Uint8Array([1, 2, 3])), new Uint8Array(63));
        }).toThrow();
    });
});
//# sourceMappingURL=key.spec.js.map