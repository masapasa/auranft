"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = exports.LOGLEVEL = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _LOGTYPE$ASSERT, _LOGTYPE$CLEAR, _LOGTYPE$COUNT, _LOGTYPE$DEBUG, _LOGTYPE$ERROR, _LOGTYPE$GROUP, _LOGTYPE$GROUPCOLLAPS, _LOGTYPE$GROUPEND, _LOGTYPE$INFO, _LOGTYPE$LOG, _LOGTYPE$TABLE, _LOGTYPE$TIME, _LOGTYPE$TIMEEND, _LOGTYPE$TRACE, _LOGTYPE$WARN;
/* eslint-disable no-console */
var LOGLEVEL;
exports.LOGLEVEL = LOGLEVEL;
(function (LOGLEVEL) {
  LOGLEVEL["ALL"] = "all";
  LOGLEVEL["INFO"] = "info";
  LOGLEVEL["DEBUG"] = "debug";
  LOGLEVEL["WARN"] = "warn";
  LOGLEVEL["ERROR"] = "error";
  LOGLEVEL["OFF"] = "off";
})(LOGLEVEL || (exports.LOGLEVEL = LOGLEVEL = {}));
var LOGTYPE;
(function (LOGTYPE) {
  LOGTYPE["LOG"] = "log";
  LOGTYPE["INFO"] = "info";
  LOGTYPE["ASSERT"] = "asset";
  LOGTYPE["TRACE"] = "trace";
  LOGTYPE["TABLE"] = "table";
  LOGTYPE["GROUP"] = "group";
  LOGTYPE["GROUPCOLLAPSED"] = "groupCollapsed";
  LOGTYPE["GROUPEND"] = "groupEnd";
  LOGTYPE["COUNT"] = "count";
  LOGTYPE["TIME"] = "time";
  LOGTYPE["TIMEEND"] = "timeEnd";
  LOGTYPE["CLEAR"] = "clear";
  LOGTYPE["DEBUG"] = "debug";
  LOGTYPE["WARN"] = "warn";
  LOGTYPE["ERROR"] = "error";
})(LOGTYPE || (LOGTYPE = {}));
function wrap(logLevel, name, message) {
  switch (logLevel) {
    case 'all':
      return ["%c ".concat(name ? name : logLevel, " %c ").concat(message), 'background: AliceBlue; border-radius: 0.25em; color: DimGrey; font-weight: 500; padding: 0.25em 0.1em;', 'background: none; border-radius: none; color: auto; font-weight: normal; padding: none;'];
    case 'info':
      return ["%c ".concat(name ? name : logLevel, " %c ").concat(message), 'background: DodgerBlue; border-radius: 0.25em; color: white; font-weight: 500; padding: 0.25em 0.1em;', 'background: none; border-radius: none; color: auto; font-weight: normal; padding: none;'];
    case 'debug':
      return ["%c ".concat(name ? name : logLevel, " %c ").concat(message), 'background: DarkViolet; border-radius: 0.25em; color: white; font-weight: 500; padding: 0.25em 0.1em;', 'background: none; border-radius: none; color: auto; font-weight: normal; padding: none;'];
    case 'warn':
      return ["%c ".concat(name ? name : logLevel, " %c ").concat(message), 'background: DarkOrange; border-radius: 0.25em; color: white; font-weight: 500; padding: 0.25em 0.1em;', 'background: none; border-radius: none; color: auto; font-weight: normal; padding: none;'];
    case 'error':
      return ["%c ".concat(name ? name : logLevel, " %c ").concat(message), 'background: Crimson; border-radius: 0.25em; color: white; font-weight: 500; padding: 0.25em 0.1em;', 'background: none; border-radius: none; color: auto; font-weight: normal; padding: none;'];
  }
}
_LOGTYPE$ASSERT = LOGTYPE.ASSERT;
_LOGTYPE$CLEAR = LOGTYPE.CLEAR;
_LOGTYPE$COUNT = LOGTYPE.COUNT;
_LOGTYPE$DEBUG = LOGTYPE.DEBUG;
_LOGTYPE$ERROR = LOGTYPE.ERROR;
_LOGTYPE$GROUP = LOGTYPE.GROUP;
_LOGTYPE$GROUPCOLLAPS = LOGTYPE.GROUPCOLLAPSED;
_LOGTYPE$GROUPEND = LOGTYPE.GROUPEND;
_LOGTYPE$INFO = LOGTYPE.INFO;
_LOGTYPE$LOG = LOGTYPE.LOG;
_LOGTYPE$TABLE = LOGTYPE.TABLE;
_LOGTYPE$TIME = LOGTYPE.TIME;
_LOGTYPE$TIMEEND = LOGTYPE.TIMEEND;
_LOGTYPE$TRACE = LOGTYPE.TRACE;
_LOGTYPE$WARN = LOGTYPE.WARN;
var Logger = /*#__PURE__*/function () {
  function Logger(label) {
    var logLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LOGLEVEL.INFO;
    (0, _classCallCheck2["default"])(this, Logger);
    (0, _defineProperty2["default"])(this, "logLevel", void 0);
    (0, _defineProperty2["default"])(this, "logType", void 0);
    (0, _defineProperty2["default"])(this, "label", void 0);
    this.logLevel = logLevel;
    this.label = label;
  }
  (0, _createClass2["default"])(Logger, [{
    key: "compare",
    value: function compare(constructorLevel, initialLevel) {
      var order = Object.values(LOGLEVEL);
      var constructorLevelIndex = order.indexOf(constructorLevel);
      var initialLevelIndex = order.indexOf(initialLevel);
      if (constructorLevelIndex < initialLevelIndex) {
        return 1;
      } else if (constructorLevelIndex > initialLevelIndex) {
        return -1;
      } else {
        return 0;
      }
    }
  }, {
    key: _LOGTYPE$ASSERT,
    value: function value(_value, message) {
      if (this.compare(this.logLevel, LOGLEVEL.ALL) >= 0) {
        return console.assert(_value, message);
      }
    }
  }, {
    key: _LOGTYPE$CLEAR,
    value: function value() {
      if (this.compare(this.logLevel, LOGLEVEL.OFF) >= 0) {
        return console.clear();
      }
    }
  }, {
    key: _LOGTYPE$COUNT,
    value: function value(label) {
      if (this.compare(this.logLevel, LOGLEVEL.ALL) >= 0) {
        return console.count(label);
      }
    }
  }, {
    key: _LOGTYPE$DEBUG,
    value: function value(message, label) {
      if (this.compare(this.logLevel, LOGLEVEL.DEBUG) >= 0) {
        var _console;
        return (_console = console).debug.apply(_console, (0, _toConsumableArray2["default"])(wrap(LOGLEVEL.DEBUG, label ? label : this.label, message)));
      }
    }
  }, {
    key: _LOGTYPE$ERROR,
    value: function value(message, label) {
      if (this.compare(this.logLevel, LOGLEVEL.ERROR) >= 0) {
        var _console2;
        return (_console2 = console).error.apply(_console2, (0, _toConsumableArray2["default"])(wrap(LOGLEVEL.ERROR, label ? label : this.label, message)));
      }
    }
  }, {
    key: _LOGTYPE$GROUP,
    value: function value(message, label) {
      if (this.compare(this.logLevel, LOGLEVEL.ALL) >= 0) {
        var _console3;
        return (_console3 = console).group.apply(_console3, (0, _toConsumableArray2["default"])(wrap(LOGLEVEL.ALL, label ? label : this.label, message)));
      }
    }
  }, {
    key: _LOGTYPE$GROUPCOLLAPS,
    value: function value(message, label) {
      if (this.compare(this.logLevel, LOGLEVEL.ALL) >= 0) {
        var _console4;
        return (_console4 = console).groupCollapsed.apply(_console4, (0, _toConsumableArray2["default"])(wrap(LOGLEVEL.ALL, label ? label : this.label, message)));
      }
    }
  }, {
    key: _LOGTYPE$GROUPEND,
    value: function value() {
      if (this.compare(this.logLevel, LOGLEVEL.ALL) >= 0) {
        return console.groupEnd();
      }
    }
  }, {
    key: _LOGTYPE$INFO,
    value: function value(message) {
      if (this.compare(this.logLevel, LOGLEVEL.INFO) >= 0) {
        var _console5;
        return (_console5 = console).info.apply(_console5, (0, _toConsumableArray2["default"])(wrap(LOGLEVEL.INFO, this.label, message)));
      }
    }
  }, {
    key: _LOGTYPE$LOG,
    value: function value(message, label) {
      if (this.compare(this.logLevel, LOGLEVEL.ALL) >= 0) {
        var _console6;
        return (_console6 = console).log.apply(_console6, (0, _toConsumableArray2["default"])(wrap(LOGLEVEL.ALL, label ? label : this.label, message)));
      }
    }
  }, {
    key: _LOGTYPE$TABLE,
    value: function value(data, columns) {
      if (this.compare(this.logLevel, LOGLEVEL.ALL) >= 0) {
        return console.table(data, columns);
      }
    }
  }, {
    key: _LOGTYPE$TIME,
    value: function value(label) {
      if (this.compare(this.logLevel, LOGLEVEL.ALL) >= 0) {
        return console.time(label);
      }
    }
  }, {
    key: _LOGTYPE$TIMEEND,
    value: function value(label) {
      if (this.compare(this.logLevel, LOGLEVEL.ALL) >= 0) {
        return console.timeEnd(label);
      }
    }
  }, {
    key: _LOGTYPE$TRACE,
    value: function value(label) {
      if (this.compare(this.logLevel, LOGLEVEL.ALL) >= 0) {
        var _console7;
        return (_console7 = console).trace.apply(_console7, (0, _toConsumableArray2["default"])(wrap(LOGLEVEL.ALL, this.label, label)));
      }
    }
  }, {
    key: _LOGTYPE$WARN,
    value: function value(message, label) {
      if (this.compare(this.logLevel, LOGLEVEL.WARN) >= 0) {
        var _console8;
        return (_console8 = console).warn.apply(_console8, (0, _toConsumableArray2["default"])(wrap(LOGLEVEL.WARN, label ? label : this.label, message)));
      }
    }
  }]);
  return Logger;
}();
exports.Logger = Logger;