"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectWalletButtonBaseStyle = exports.ConnectWalletButton = void 0;
var _react = require("@chakra-ui/react");
var _react2 = _interopRequireWildcard(require("react"));
var _ri = require("react-icons/ri");
var _index = require("../../index");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var ConnectWalletButtonBaseStyle = function ConnectWalletButtonBaseStyle(theme) {
  return {
    display: 'flex',
    alignItems: 'center',
    px: 2.5,
    w: 'full',
    h: 'auto',
    minH: 12,
    fontSize: 'lg',
    bgColor: "connect-wallet-button-background-color-".concat(theme),
    color: "connect-wallet-button-text-color-".concat(theme),
    _hover: {
      bg: "connect-wallet-button-hover-background-color-".concat(theme)
    },
    _active: {
      bg: "connect-wallet-button-active-background-color-".concat(theme),
      color: "connect-wallet-button-active-text-color-".concat(theme),
      boxShadow: 'none'
    },
    _focus: {
      boxShadow: "connect-wallet-button-focus-shadow-".concat(theme)
    },
    _loading: {
      bg: "connect-wallet-button-background-color-".concat(theme),
      color: "connect-wallet-button-text-color-".concat(theme),
      cursor: 'progress',
      _hover: {
        bg: "connect-wallet-button-background-color-".concat(theme),
        color: "connect-wallet-button-text-color-".concat(theme),
        boxShadow: 'none'
      },
      _active: {
        bg: "connect-wallet-button-background-color-".concat(theme),
        color: "connect-wallet-button-text-color-".concat(theme),
        boxShadow: 'none'
      },
      _focus: {
        bg: "connect-wallet-button-background-color-".concat(theme),
        color: "connect-wallet-button-text-color-".concat(theme),
        boxShadow: 'none'
      }
    },
    _disabled: {
      opacity: 0.8,
      bg: "connect-wallet-button-disabled-background-color-".concat(theme),
      color: "connect-wallet-button-disabled-text-color-".concat(theme),
      cursor: 'not-allowed',
      _hover: {
        bg: "connect-wallet-button-disabled-background-color-".concat(theme),
        color: "connect-wallet-button-disabled-text-color-".concat(theme),
        boxShadow: 'none'
      },
      _active: {
        bg: "connect-wallet-button-disabled-background-color-".concat(theme),
        color: "connect-wallet-button-disabled-text-color-".concat(theme),
        boxShadow: 'none'
      },
      _focus: {
        bg: "connect-wallet-button-disabled-background-color-".concat(theme),
        color: "connect-wallet-button-disabled-text-color-".concat(theme),
        boxShadow: 'none'
      }
    }
  };
};
exports.ConnectWalletButtonBaseStyle = ConnectWalletButtonBaseStyle;
var ConnectWalletButton = function ConnectWalletButton(_ref) {
  var _ref$buttonText = _ref.buttonText,
    buttonText = _ref$buttonText === void 0 ? 'Connect Wallet' : _ref$buttonText,
    loading = _ref.loading,
    disabled = _ref.disabled,
    _ref$leftIcon = _ref.leftIcon,
    leftIcon = _ref$leftIcon === void 0 ? /*#__PURE__*/_react2["default"].createElement(_react.Icon, {
      as: _ri.RiWallet3Fill
    }) : _ref$leftIcon,
    rightIcon = _ref.rightIcon,
    className = _ref.className,
    styleProps = _ref.styleProps,
    onClick = _ref.onClick;
  var _useContext = (0, _react2.useContext)(_index.ThemeContext),
    theme = _useContext.theme;
  return /*#__PURE__*/_react2["default"].createElement(_react.Button, {
    className: className,
    isLoading: loading,
    isDisabled: disabled,
    iconSpacing: !buttonText ? 0 : 1.5,
    leftIcon: leftIcon ? /*#__PURE__*/_react2["default"].createElement(_react.Center, null, leftIcon) : undefined,
    rightIcon: rightIcon ? /*#__PURE__*/_react2["default"].createElement(_react.Center, null, rightIcon) : undefined,
    onClick: onClick,
    sx: styleProps ? styleProps : ConnectWalletButtonBaseStyle(theme)
  }, buttonText);
};
exports.ConnectWalletButton = ConnectWalletButton;