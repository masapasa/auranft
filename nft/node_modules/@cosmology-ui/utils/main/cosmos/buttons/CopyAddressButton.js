"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CopyAddressButtonBaseStyle = exports.CopyAddressButton = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("@chakra-ui/react");
var _react2 = _interopRequireWildcard(require("react"));
var _fa = require("react-icons/fa");
var _fi = require("react-icons/fi");
var _index = require("../../index");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function stringTruncateFromCenter(str, maxLength) {
  var midChar = 'â€¦'; // character to insert into the center of the result
  var left;
  var right;
  if (str.length <= maxLength) return str;

  // length of beginning part
  // eslint-disable-next-line prefer-const
  left = Math.ceil(maxLength / 2);

  // start index of ending part
  // eslint-disable-next-line prefer-const
  right = str.length - Math.floor(maxLength / 2) + 1;
  return str.substring(0, left) + midChar + str.substring(right);
}
var defaultText = 'address not identified yet';
var CopyAddressButtonBaseStyle = function CopyAddressButtonBaseStyle(theme, hasCopied) {
  return {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: 'sm',
    fontWeight: 'normal',
    letterSpacing: '0.4px',
    lineHeight: 6,
    borderRadius: 'full',
    border: '1px solid',
    borderColor: "copy-address-button-border-color-".concat(theme),
    w: 'full',
    h: 'auto',
    minH: 'fit-content',
    py: 0.5,
    px: 2,
    color: "copy-address-button-text-color-".concat(theme),
    transition: 'all .3s ease-in-out',
    _hover: {
      bg: "copy-address-button-hover-background-color-".concat(theme),
      opacity: 0.9
    },
    _focus: {
      boxShadow: 'none'
    },
    _loading: {
      py: 3.5,
      cursor: 'progress'
    },
    _disabled: {
      opacity: 0.6,
      cursor: 'not-allowed',
      _hover: {
        bg: 'transparent',
        opacity: 0.6
      },
      _active: {
        boxShadow: 'none'
      },
      _focus: {
        boxShadow: 'none'
      }
    },
    '>.copy-address-button-icon': {
      opacity: 0.85,
      ml: 2,
      color: hasCopied ? 'green.400' : 'inherit'
    }
  };
};
exports.CopyAddressButtonBaseStyle = CopyAddressButtonBaseStyle;
var CopyAddressButton = function CopyAddressButton(_ref) {
  var _ref$address = _ref.address,
    address = _ref$address === void 0 ? defaultText : _ref$address,
    loading = _ref.loading,
    disabled = _ref.disabled,
    className = _ref.className,
    styleProps = _ref.styleProps,
    _ref$maxDisplayLength = _ref.maxDisplayLength,
    maxDisplayLength = _ref$maxDisplayLength === void 0 ? 14 : _ref$maxDisplayLength;
  var _useContext = (0, _react2.useContext)(_index.ThemeContext),
    theme = _useContext.theme;
  var _useState = (0, _react2.useState)(address),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    displayAddress = _useState2[0],
    setDisplayAddress = _useState2[1];
  var _useState3 = (0, _react2.useState)(disabled),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    displayIsDisabled = _useState4[0],
    setDisplayIsDisabled = _useState4[1];
  var _useClipboard = (0, _react.useClipboard)(''),
    hasCopied = _useClipboard.hasCopied,
    onCopy = _useClipboard.onCopy,
    setValue = _useClipboard.setValue;
  (0, _react2.useEffect)(function () {
    // default
    if (address === defaultText) {
      setDisplayAddress(defaultText);
      setDisplayIsDisabled(true);
    }
    if (address !== defaultText) setValue(address);
    // has address and address length > max display length
    if (address !== defaultText && address.length >= maxDisplayLength) {
      setDisplayAddress(stringTruncateFromCenter(address, maxDisplayLength));
      if (disabled) setDisplayIsDisabled(true);
      if (!disabled) setDisplayIsDisabled(false);
    }
    // has address and address length < max display length
    if (address !== defaultText && address.length <= maxDisplayLength) {
      setDisplayAddress(address);
      if (disabled) setDisplayIsDisabled(true);
      if (!disabled) setDisplayIsDisabled(false);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [address, maxDisplayLength, disabled]);
  return /*#__PURE__*/_react2["default"].createElement(_react.Button, {
    className: className,
    title: !loading && !disabled && address !== defaultText ? address : '',
    variant: "unstyled",
    isDisabled: displayIsDisabled,
    isLoading: loading,
    onClick: onCopy,
    sx: styleProps ? styleProps : CopyAddressButtonBaseStyle(theme, hasCopied)
  }, !loading ? displayAddress : undefined, !loading && address !== defaultText ? /*#__PURE__*/_react2["default"].createElement(_react.Icon, {
    className: "copy-address-button-icon",
    as: hasCopied ? _fa.FaCheckCircle : _fi.FiCopy
  }) : undefined);
};
exports.CopyAddressButton = CopyAddressButton;