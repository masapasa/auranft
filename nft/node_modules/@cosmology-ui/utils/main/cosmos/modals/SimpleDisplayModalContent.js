"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleDisplayModalContentBaseStyle = exports.SimpleDisplayModalContent = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("@chakra-ui/react");
var _react2 = _interopRequireWildcard(require("react"));
var _index = require("../../index");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function handleStatusColor(theme, status) {
  switch (status) {
    case _index.LogoStatus.Loading:
      return {
        border: "simple-display-modal-content-loading-border-color-".concat(theme),
        text: "simple-display-modal-content-loading-header-text-color-".concat(theme)
      };
    case _index.LogoStatus.Warning:
      return {
        border: "simple-display-modal-content-warning-border-color-".concat(theme),
        text: "simple-display-modal-content-warning-header-text-color-".concat(theme)
      };
    case _index.LogoStatus.Error:
      return {
        border: "simple-display-modal-content-error-border-color-".concat(theme),
        text: "simple-display-modal-content-error-header-text-color-".concat(theme)
      };
    default:
      return undefined;
  }
}
var SimpleDisplayModalContentBaseStyle = function SimpleDisplayModalContentBaseStyle(theme, status) {
  var _handleStatusColor, _handleStatusColor2, _handleStatusColor3, _handleStatusColor4, _handleStatusColor5;
  return {
    w: 80,
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    textAlign: 'center',
    px: 4,
    pt: 6,
    pb: 8,
    '>.modal-content-logo': {
      position: 'relative',
      mx: 'auto',
      w: 20,
      h: 20,
      minW: 20,
      minH: 20,
      maxW: 20,
      maxH: 20,
      mb: 4,
      '>.modal-content-logo-status': {
        position: 'absolute',
        top: status === _index.LogoStatus.Loading ? -1.5 : -2,
        right: status === _index.LogoStatus.Loading ? -1.5 : -2,
        bottom: status === _index.LogoStatus.Loading ? -1.5 : -2,
        left: status === _index.LogoStatus.Loading ? -1.5 : -2,
        border: '2px solid',
        borderTopColor: status === _index.LogoStatus.Loading ? 'transparent' : (_handleStatusColor = handleStatusColor(theme, status)) === null || _handleStatusColor === void 0 ? void 0 : _handleStatusColor.border,
        borderBottomColor: status === _index.LogoStatus.Loading ? 'transparent' : (_handleStatusColor2 = handleStatusColor(theme, status)) === null || _handleStatusColor2 === void 0 ? void 0 : _handleStatusColor2.border,
        borderLeftColor: (_handleStatusColor3 = handleStatusColor(theme, status)) === null || _handleStatusColor3 === void 0 ? void 0 : _handleStatusColor3.border,
        borderRightColor: (_handleStatusColor4 = handleStatusColor(theme, status)) === null || _handleStatusColor4 === void 0 ? void 0 : _handleStatusColor4.border,
        borderRadius: 'full'
      },
      '>.modal-content-image': {
        p: status ? 3.5 : 0
      }
    },
    '>.modal-content-header': {
      fontWeight: 'semibold',
      color: (_handleStatusColor5 = handleStatusColor(theme, status)) === null || _handleStatusColor5 === void 0 ? void 0 : _handleStatusColor5.text
    },
    '>.modal-content-description': {
      position: 'relative',
      '>.modal-content-description-box': {
        fontSize: 'sm',
        lineHeight: 1.3,
        opacity: 0.7,
        whiteSpace: 'pre-line',
        px: 8,
        pt: 1,
        maxH: 28,
        overflowY: 'scroll',
        // For Firefox
        scrollbarWidth: 'none',
        // For Chrome and other browsers except Firefox
        '&::-webkit-scrollbar': {
          display: 'none'
        }
      },
      '>.modal-content-description-animate-shadow': {
        position: 'absolute',
        left: 0,
        bottom: 0,
        w: 'full',
        bg: "simple-display-modal-content-shadow-background-color-".concat(theme)
      }
    },
    '>.modal-content-username': {
      alignItems: 'center',
      fontSize: 'lg',
      fontWeight: 'semibold',
      '>.modal-content-username-image': {
        w: 4,
        h: 4,
        minW: 4,
        minH: 4,
        maxW: 4,
        maxH: 4
      }
    },
    '>.modal-content-address-button': {
      w: 'full',
      pt: 2.5,
      px: 8
    },
    '>.modal-content-bottom-button': {
      w: 'full',
      pt: 3.5,
      px: 3
    },
    '>.modal-content-bottom-link': {
      w: 'full',
      pt: 2
    }
  };
};
exports.SimpleDisplayModalContentBaseStyle = SimpleDisplayModalContentBaseStyle;
var SimpleDisplayModalContent = function SimpleDisplayModalContent(_ref) {
  var status = _ref.status,
    logo = _ref.logo,
    contentHeader = _ref.contentHeader,
    contentDesc = _ref.contentDesc,
    username = _ref.username,
    walletIcon = _ref.walletIcon,
    addressButton = _ref.addressButton,
    bottomButton = _ref.bottomButton,
    bottomLink = _ref.bottomLink,
    className = _ref.className,
    styleProps = _ref.styleProps;
  var _useContext = (0, _react2.useContext)(_index.ThemeContext),
    theme = _useContext.theme;
  var descRef = (0, _react2.useRef)(null);
  var _useState = (0, _react2.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    displayBlur = _useState2[0],
    setDisplayBlur = _useState2[1];
  (0, _react2.useEffect)(function () {
    if (descRef.current) {
      if (descRef.current.clientHeight >= 112) setDisplayBlur(true);
      if (descRef.current.clientHeight < 112) setDisplayBlur(false);
      var scrollHandler = function scrollHandler() {
        var height = Math.abs(descRef.current.scrollHeight - descRef.current.clientHeight - descRef.current.scrollTop);
        if (height < 1) setDisplayBlur(false);
        if (height >= 1) setDisplayBlur(true);
      };
      descRef.current.addEventListener('scroll', scrollHandler);
    }
  }, [descRef, contentDesc]);
  return /*#__PURE__*/_react2["default"].createElement(_react.Flex, {
    className: className,
    sx: styleProps ? styleProps : SimpleDisplayModalContentBaseStyle(theme, status)
  }, logo ? /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    className: "modal-content-logo"
  }, status === 'loading' ? /*#__PURE__*/_react2["default"].createElement(_index.AnimateBox, {
    className: "modal-content-logo-status",
    initial: "hidden",
    animate: "animate",
    variants: _index.LoadingVariants
  }) : undefined, status === 'warning' || status === 'error' ? /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    className: "modal-content-logo-status"
  }) : undefined, /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    className: "modal-content-image"
  }, typeof logo === 'string' ? /*#__PURE__*/_react2["default"].createElement(_react.Image, {
    src: logo,
    w: "full",
    h: "full",
    alt: "logo"
  }) : /*#__PURE__*/_react2["default"].createElement(_react.Icon, {
    as: logo,
    w: "full",
    h: "full"
  }))) : undefined, contentHeader ? /*#__PURE__*/_react2["default"].createElement(_react.Text, {
    className: "modal-content-header"
  }, contentHeader) : undefined, contentDesc ? /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    className: "modal-content-description"
  }, /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    ref: descRef,
    className: "modal-content-description-box"
  }, /*#__PURE__*/_react2["default"].createElement(_react.Text, null, contentDesc)), /*#__PURE__*/_react2["default"].createElement(_index.AnimateBox, {
    className: "modal-content-description-animate-shadow",
    initial: false,
    animate: displayBlur ? {
      opacity: 1,
      height: 36,
      transition: {
        type: 'spring',
        duration: 0.1
      }
    } : {
      height: 0,
      opacity: 0,
      transition: {
        type: 'spring',
        duration: 0.2
      }
    }
  })) : undefined, username ? /*#__PURE__*/_react2["default"].createElement(_react.Stack, {
    isInline: true,
    className: "modal-content-username"
  }, /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    className: "modal-content-username-image"
  }, /*#__PURE__*/_react2["default"].createElement(_react.Image, {
    src: walletIcon,
    alt: "wallet-icon"
  })), /*#__PURE__*/_react2["default"].createElement(_react.Text, null, username)) : undefined, addressButton ? /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    className: "modal-content-address-button"
  }, addressButton) : undefined, bottomButton ? /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    className: "modal-content-bottom-button"
  }, bottomButton) : undefined, bottomLink ? /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    className: "modal-content-bottom-link"
  }, bottomLink) : undefined);
};
exports.SimpleDisplayModalContent = SimpleDisplayModalContent;