"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QRCodeSkeleton = exports.QRCodeDisplayError = exports.QRCodeBaseStyle = exports.QRCode = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("@chakra-ui/react");
var _qrcode = require("qrcode.react");
var _react2 = _interopRequireWildcard(require("react"));
var _io = require("react-icons/io5");
var _index = require("../../index");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var QRCodeSkeleton = function QRCodeSkeleton() {
  return /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    flexDirection: "column",
    w: "full",
    maxW: 72,
    minH: 40,
    px: 6,
    textAlign: "center"
  }, /*#__PURE__*/_react2["default"].createElement(_react.Skeleton, {
    w: 48,
    h: 48,
    borderRadius: "base"
  }));
};
exports.QRCodeSkeleton = QRCodeSkeleton;
var QRCodeDisplayError = function QRCodeDisplayError(_ref) {
  var theme = _ref.theme,
    qrCodeSize = _ref.qrCodeSize,
    onRefresh = _ref.onRefresh;
  return /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    className: "qr-code"
  }, /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    className: "qr-code-blur",
    filter: "auto",
    blur: "md"
  }), /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    className: "qr-code-refresh-button-box"
  }, /*#__PURE__*/_react2["default"].createElement(_react.IconButton, {
    className: "qr-code-refresh-button",
    "aria-label": "refresh-button",
    icon: /*#__PURE__*/_react2["default"].createElement(_io.IoReloadOutline, null),
    size: "lg",
    onClick: onRefresh
  })), /*#__PURE__*/_react2["default"].createElement(_qrcode.QRCodeSVG, {
    className: "qr-code-svg",
    value: 'https://',
    size: qrCodeSize,
    bgColor: "var(--chakra-colors-qr-code-qr-background-color-".concat(theme, ")"),
    fgColor: "var(--chakra-colors-qr-code-qr-text-color-".concat(theme, ")"),
    level: 'L',
    includeMargin: false
  }));
};
exports.QRCodeDisplayError = QRCodeDisplayError;
var QRCodeBaseStyle = function QRCodeBaseStyle(theme, status) {
  return {
    w: 80,
    justifyContent: 'center',
    alignItems: 'center',
    spacing: 4,
    p: 6,
    pb: 10,
    '>.qr-code-description': {
      fontWeight: 'medium',
      textAlign: 'center',
      opacity: 0.75,
      px: 4,
      pb: 1.5
    },
    '>.qr-code': {
      position: 'relative',
      w: 'full',
      border: '1px solid',
      borderColor: "qr-code-border-color-".concat(theme),
      borderRadius: 'lg',
      boxShadow: "qr-code-shadow-".concat(theme),
      p: 5,
      '>.qr-code-refresh-button-box': {
        position: 'absolute',
        w: 'full',
        h: 'full',
        zIndex: 3,
        '>.qr-code-refresh-button': {
          bg: "qr-code-qr-background-color-".concat(theme),
          color: "qr-code-qr-text-color-".concat(theme),
          borderRadius: 'full',
          boxShadow: "qr-code-button-shadow-".concat(theme)
        }
      },
      '>.qr-code-blur': {
        position: 'absolute',
        w: 'full',
        h: 'full',
        zIndex: 2,
        borderRadius: 'lg',
        blur: 'md',
        bg: "qr-code-qr-blur-background-color-".concat(theme)
      },
      '>.qr-code-svg': {
        opacity: 0.5
      }
    },
    '>.qr-code-error-title': {
      fontWeight: 'medium',
      textAlign: 'center',
      pt: 2,
      '&.qr-code-error': {
        color: "qr-code-qr-error-text-color-".concat(theme)
      },
      '&.qr-code-expired': {
        color: "qr-code-qr-expired-text-color-".concat(theme)
      }
    },
    '>.qr-code-error-desc-box': {
      position: 'relative',
      '>.qr-code-error-desc': {
        maxH: 16,
        px: 1,
        overflowX: 'hidden',
        overflowY: 'auto',
        scrollbarWidth: 'none',
        // For Firefox
        '&::-webkit-scrollbar': {
          // For Chrome and other browsers except Firefox
          display: 'none'
        },
        fontSize: 'sm',
        fontWeight: 'base',
        textAlign: 'center',
        lineHeight: 'shorter',
        opacity: 0.75
      },
      '>.qr-code-error-desc-animate-shadow': {
        position: 'absolute',
        left: 0,
        bottom: 0,
        w: 'full',
        bg: "qr-code-shadow-background-color-".concat(theme)
      }
    }
  };
};
exports.QRCodeBaseStyle = QRCodeBaseStyle;
var QRCode = function QRCode(_ref2) {
  var status = _ref2.status,
    link = _ref2.link,
    description = _ref2.description,
    _ref2$qrCodeSize = _ref2.qrCodeSize,
    qrCodeSize = _ref2$qrCodeSize === void 0 ? 230 : _ref2$qrCodeSize,
    errorTitle = _ref2.errorTitle,
    errorDesc = _ref2.errorDesc,
    className = _ref2.className,
    styleProps = _ref2.styleProps,
    onRefresh = _ref2.onRefresh;
  var _useContext = (0, _react2.useContext)(_index.ThemeContext),
    theme = _useContext.theme;
  var descRef = (0, _react2.useRef)(null);
  var _useState = (0, _react2.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    displayBlur = _useState2[0],
    setDisplayBlur = _useState2[1];
  (0, _react2.useEffect)(function () {
    if (descRef.current) {
      if (descRef.current.clientHeight >= 64) setDisplayBlur(true);
      if (descRef.current.clientHeight < 64) setDisplayBlur(false);
      var scrollHandler = function scrollHandler() {
        var height = Math.abs(descRef.current.scrollHeight - descRef.current.clientHeight - descRef.current.scrollTop);
        if (height < 1) setDisplayBlur(false);
        if (height >= 1) setDisplayBlur(true);
      };
      descRef.current.addEventListener('scroll', scrollHandler);
    }
  }, [descRef, errorDesc]);
  return /*#__PURE__*/_react2["default"].createElement(_react.Stack, {
    className: className,
    sx: styleProps ? styleProps : QRCodeBaseStyle(theme, status)
  }, description ? /*#__PURE__*/_react2["default"].createElement(_react.Text, {
    className: "qr-code-description"
  }, description) : undefined, status === _index.QRCodeStatus.Pending ? /*#__PURE__*/_react2["default"].createElement(QRCodeSkeleton, null) : undefined, status === _index.QRCodeStatus.Done ? /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    className: "qr-code"
  }, /*#__PURE__*/_react2["default"].createElement(_qrcode.QRCodeSVG, {
    value: link,
    size: qrCodeSize,
    bgColor: "var(--chakra-colors-qr-code-qr-background-color-".concat(theme, ")"),
    fgColor: "var(--chakra-colors-qr-code-qr-text-color-".concat(theme, ")"),
    level: 'L',
    includeMargin: false
  })) : undefined, status === _index.QRCodeStatus.Error || status === _index.QRCodeStatus.Expired ? /*#__PURE__*/_react2["default"].createElement(QRCodeDisplayError, {
    theme: theme,
    qrCodeSize: qrCodeSize,
    onRefresh: onRefresh
  }) : undefined, errorTitle ? /*#__PURE__*/_react2["default"].createElement(_react.Text, {
    className: "qr-code-error-title ".concat(status === _index.QRCodeStatus.Error ? 'qr-code-error' : '', " ").concat(status === _index.QRCodeStatus.Expired ? 'qr-code-expired' : '')
  }, errorTitle) : undefined, errorDesc ? /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    className: "qr-code-error-desc-box"
  }, /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    ref: descRef,
    className: "qr-code-error-desc"
  }, /*#__PURE__*/_react2["default"].createElement(_react.Text, null, errorDesc)), /*#__PURE__*/_react2["default"].createElement(_index.AnimateBox, {
    className: "qr-code-error-desc-animate-shadow",
    initial: false,
    animate: displayBlur ? {
      opacity: 1,
      height: 28,
      transition: {
        type: 'spring',
        duration: 0.1
      }
    } : {
      height: 0,
      opacity: 0,
      transition: {
        type: 'spring',
        duration: 0.2
      }
    }
  })) : undefined);
};
exports.QRCode = QRCode;