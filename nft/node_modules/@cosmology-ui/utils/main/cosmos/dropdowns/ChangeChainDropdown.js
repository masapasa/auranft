"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SkeletonOptions = exports.Placeholder = exports.Option = exports.LoadingIndicator = exports.IndicatorSeparator = exports.DropdownIndicator = exports.ChangeChainDropdownBaseStyle = exports.ChangeChainDropdown = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("@chakra-ui/react");
var _chakraReactSelect = require("chakra-react-select");
var _fastFuzzy = require("fast-fuzzy");
var _react2 = _interopRequireWildcard(require("react"));
var _fi = require("react-icons/fi");
var _index = require("../../index");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var SkeletonOptions = function SkeletonOptions() {
  return /*#__PURE__*/_react2["default"].createElement(_react.Stack, {
    isInline: true,
    alignItems: "center",
    spacing: 3
  }, /*#__PURE__*/_react2["default"].createElement(_react.SkeletonCircle, {
    w: 10,
    h: 10
  }), /*#__PURE__*/_react2["default"].createElement(_react.Skeleton, {
    w: 40,
    h: 6
  }));
};
exports.SkeletonOptions = SkeletonOptions;
var IndicatorSeparator = function IndicatorSeparator() {
  return null;
};
exports.IndicatorSeparator = IndicatorSeparator;
var LoadingIndicator = function LoadingIndicator(props) {
  return /*#__PURE__*/_react2["default"].createElement(_chakraReactSelect.chakraComponents.LoadingIndicator, (0, _extends2["default"])({
    emptyColor: "transparent",
    speed: "0.45s",
    thickness: "2px"
  }, props));
};
exports.LoadingIndicator = LoadingIndicator;
var DropdownIndicator = function DropdownIndicator(props) {
  return /*#__PURE__*/_react2["default"].createElement(_chakraReactSelect.chakraComponents.DropdownIndicator, props, /*#__PURE__*/_react2["default"].createElement(_react.Icon, {
    as: _fi.FiChevronDown
  }));
};
exports.DropdownIndicator = DropdownIndicator;
var Placeholder = function Placeholder(props) {
  if (props.hasValue) {
    var _props$getValue$0$ico, _props$getValue$0$ico2, _props$getValue$0$ico3;
    return /*#__PURE__*/_react2["default"].createElement(_chakraReactSelect.chakraComponents.Placeholder, props, /*#__PURE__*/_react2["default"].createElement(_react.Center, {
      className: "change-chain-dropdown-value-image-box"
    }, /*#__PURE__*/_react2["default"].createElement(_react.Center, {
      className: "change-chain-dropdown-value-image-padding"
    }, /*#__PURE__*/_react2["default"].createElement(_react.Image, {
      src: ((_props$getValue$0$ico = props.getValue()[0].icon) === null || _props$getValue$0$ico === void 0 ? void 0 : _props$getValue$0$ico.png) || ((_props$getValue$0$ico2 = props.getValue()[0].icon) === null || _props$getValue$0$ico2 === void 0 ? void 0 : _props$getValue$0$ico2.jpeg) || ((_props$getValue$0$ico3 = props.getValue()[0].icon) === null || _props$getValue$0$ico3 === void 0 ? void 0 : _props$getValue$0$ico3.svg),
      fallbackSrc: "https://dummyimage.com/150/9e9e9e/ffffff&text=".concat(props.getValue()[0].label.slice(0, 1)),
      alt: props.getValue()[0].name
    }))), /*#__PURE__*/_react2["default"].createElement(_react.Text, {
      className: "change-chain-dropdown-value-name"
    }, props.getValue()[0].label));
  }
  return /*#__PURE__*/_react2["default"].createElement(_chakraReactSelect.chakraComponents.Placeholder, props);
};
exports.Placeholder = Placeholder;
var Option = function Option(props) {
  var _props$data$icon, _props$data$icon2, _props$data$icon3;
  return /*#__PURE__*/_react2["default"].createElement(_chakraReactSelect.chakraComponents.Option, props, /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    className: "change-chain-dropdown-option-box"
  }, /*#__PURE__*/_react2["default"].createElement(_react.Center, {
    className: "change-chain-dropdown-option-image-padding"
  }, /*#__PURE__*/_react2["default"].createElement(_react.Image, {
    alt: props.data.name,
    src: ((_props$data$icon = props.data.icon) === null || _props$data$icon === void 0 ? void 0 : _props$data$icon.png) || ((_props$data$icon2 = props.data.icon) === null || _props$data$icon2 === void 0 ? void 0 : _props$data$icon2.jpeg) || ((_props$data$icon3 = props.data.icon) === null || _props$data$icon3 === void 0 ? void 0 : _props$data$icon3.svg),
    fallbackSrc: "https://dummyimage.com/400/9e9e9e/ffffff&text=".concat(props.data.label.slice(0, 1))
  }))), /*#__PURE__*/_react2["default"].createElement(_react.Text, {
    className: "change-chain-dropdown-option-name"
  }, props.data.label));
};
exports.Option = Option;
var ChangeChainDropdownBaseStyle = function ChangeChainDropdownBaseStyle(theme) {
  var menuHeight = (0, _react.useBreakpointValue)({
    base: 60,
    md: 56
  });
  var chakraStyle = {
    control: function control(provided) {
      return _objectSpread(_objectSpread({}, provided), {}, {
        minH: 8,
        height: 12,
        lineHeight: 1,
        borderRadius: 'lg',
        _focus: {
          borderColor: 'transparent',
          boxShadow: "change-chain-dropdown-shadow-".concat(theme)
        }
      });
    },
    menu: function menu(provided) {
      return _objectSpread(_objectSpread({}, provided), {}, {
        h: menuHeight,
        mt: 2,
        mb: 2,
        overflow: 'hidden',
        bg: "change-chain-dropdown-menu-background-color-".concat(theme),
        boxShadow: "change-chain-dropdown-menu-shadow-".concat(theme),
        borderRadius: 'base'
      });
    },
    menuList: function menuList(provided) {
      return _objectSpread(_objectSpread({}, provided), {}, {
        h: menuHeight,
        bg: 'inherit',
        border: 'none',
        borderRadius: 'none',
        pl: 2,
        pr: 0.5,
        // For Firefox
        scrollbarWidth: 'thin',
        scrollbarColor: "var(--chakra-colors-change-chain-dropdown-firefox-scrollbar-color-".concat(theme, ")"),
        // For Chrome and other browsers except Firefox
        '&::-webkit-scrollbar': {
          width: '8px',
          background: "change-chain-dropdown-scrollbar-background-color-".concat(theme),
          borderRadius: '3px'
        },
        '&::-webkit-scrollbar-thumb': {
          background: "change-chain-dropdown-scrollbar-thumb-color-".concat(theme),
          borderRadius: '10px',
          border: '2px solid transparent',
          // make it like padding
          backgroundClip: 'content-box'
        }
      });
    },
    placeholder: function placeholder(provided, state) {
      return _objectSpread(_objectSpread({}, provided), {}, {
        display: 'flex',
        alignItems: 'center',
        fontSize: 'md',
        fontWeight: 'medium',
        overflow: 'hidden',
        wordBreak: 'break-word',
        w: 'full',
        color: state.hasValue ? "change-chain-dropdown-placeholder-selected-text-color-".concat(theme) : "change-chain-dropdown-placeholder-text-color-".concat(theme),
        borderColor: "change-chain-dropdown-icon-border-color-".concat(theme),
        '>.change-chain-dropdown-value-image-box': {
          minW: 8,
          minH: 8,
          maxW: 8,
          maxH: 8,
          w: 8,
          h: 8,
          mr: 2,
          border: '1px solid',
          borderColor: 'inherit',
          borderRadius: 'full',
          overflow: 'hidden',
          '>.change-chain-dropdown-value-image-padding': {
            m: '1px',
            overflow: 'hidden',
            borderRadius: 'full'
          }
        },
        '>.change-chain-dropdown-value-name': {
          opacity: 0.85
        }
      });
    },
    clearIndicator: function clearIndicator(provided) {
      return _objectSpread(_objectSpread({}, provided), {}, {
        borderRadius: 'full',
        color: "change-chain-dropdown-indicator-text-color-".concat(theme),
        w: 6,
        h: 6,
        '>svg': {
          w: 2.5,
          h: 2.5
        }
      });
    },
    loadingIndicator: function loadingIndicator(provided) {
      return _objectSpread(_objectSpread({}, provided), {}, {
        color: "change-chain-dropdown-loading-indicator-color-".concat(theme)
      });
    },
    dropdownIndicator: function dropdownIndicator(provided) {
      return _objectSpread(_objectSpread({}, provided), {}, {
        bg: "change-chain-dropdown-indicator-background-color-".concat(theme),
        color: "change-chain-dropdown-indicator-text-color-".concat(theme),
        pl: 0.5
      });
    },
    option: function option(provided, _ref) {
      var isSelected = _ref.isSelected;
      return _objectSpread(_objectSpread({}, provided), {}, {
        display: 'flex',
        borderRadius: 'lg',
        minH: 8,
        h: 'auto',
        w: 'full',
        p: '0.4rem 0.5rem',
        alignItems: 'center',
        spacing: 2,
        overflow: 'hidden',
        wordBreak: 'break-word',
        bg: isSelected ? "change-chain-dropdown-option-selected-background-color-".concat(theme) : "change-chain-dropdown-option-background-color-".concat(theme),
        color: "change-chain-dropdown-text-color-".concat(theme),
        borderColor: isSelected ? "change-chain-dropdown-icon-border-color-".concat(theme) : "change-chain-dropdown-icon-border-color-".concat(theme),
        _hover: {
          bg: isSelected ? "change-chain-dropdown-option-selected-background-color-".concat(theme) : "change-chain-dropdown-option-hover-background-color-".concat(theme)
        },
        _active: {
          bg: "change-chain-dropdown-option-active-background-color-".concat(theme)
        },
        _focus: {
          bg: "change-chain-dropdown-option-focus-background-color-".concat(theme)
        },
        _disabled: {
          bg: "change-chain-dropdown-option-disabled-background-color-".concat(theme),
          _hover: {
            bg: "change-chain-dropdown-option-disabled-background-color-".concat(theme)
          }
        },
        _notFirst: {
          mt: 1
        },
        '>.change-chain-dropdown-option-box': {
          minW: 8,
          minH: 8,
          maxW: 8,
          maxH: 8,
          w: 8,
          h: 8,
          mr: 2,
          border: '1px solid',
          borderColor: 'inherit',
          borderRadius: 'full',
          overflow: 'hidden'
        },
        '>.change-chain-dropdown-option-image-padding': {
          m: '1px',
          overflow: 'hidden',
          borderRadius: 'full'
        },
        '>.change-chain-dropdown-option-name': {
          opacity: 0.8
        }
      });
    }
  };
  return chakraStyle;
};
exports.ChangeChainDropdownBaseStyle = ChangeChainDropdownBaseStyle;
var ChangeChainDropdown = function ChangeChainDropdown(_ref2) {
  var data = _ref2.data,
    selectedItem = _ref2.selectedItem,
    loading = _ref2.loading,
    disabled = _ref2.disabled,
    styleProps = _ref2.styleProps,
    className = _ref2.className,
    _ref2$customComponent = _ref2.customComponents,
    customComponents = _ref2$customComponent === void 0 ? {
      DropdownIndicator: DropdownIndicator,
      IndicatorSeparator: IndicatorSeparator,
      LoadingIndicator: LoadingIndicator,
      Placeholder: Placeholder,
      Option: Option
    } : _ref2$customComponent,
    onChange = _ref2.onChange;
  var _useContext = (0, _react2.useContext)(_index.ThemeContext),
    theme = _useContext.theme;
  return /*#__PURE__*/_react2["default"].createElement(_react.Box, {
    w: "full",
    h: "full",
    position: "relative",
    zIndex: 150
  }, /*#__PURE__*/_react2["default"].createElement(_chakraReactSelect.AsyncSelect, {
    id: "select-chain",
    instanceId: "select-chain",
    className: className,
    placeholder: "Choose a chain",
    chakraStyles: styleProps ? styleProps : ChangeChainDropdownBaseStyle(theme),
    isDisabled: disabled,
    isLoading: loading,
    isClearable: true,
    isMulti: false,
    isOptionDisabled: function isOptionDisabled(option) {
      return option.disabled ? option.disabled : false;
    },
    blurInputOnSelect: true,
    controlShouldRenderValue: false,
    loadingMessage: function loadingMessage() {
      return /*#__PURE__*/_react2["default"].createElement(SkeletonOptions, null);
    },
    value: selectedItem,
    defaultOptions: data,
    menuPlacement: "auto",
    loadOptions: function loadOptions(inputValue, callback) {
      var searcher = new _fastFuzzy.Searcher(data, {
        keySelector: function keySelector(obj) {
          return obj.label;
        }
      });
      callback(searcher.search(inputValue));
    },
    onChange: onChange,
    components: customComponents
  }));
};
exports.ChangeChainDropdown = ChangeChainDropdown;