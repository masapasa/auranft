import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import React, { createContext, useContext, useEffect, useReducer } from 'react';
import { Themes } from '../utils/types';
function handleThemeChange(state, action) {
  if (action.theme !== state.theme) {
    return _objectSpread(_objectSpread({}, state), {}, {
      theme: action.theme
    });
  }
  return state;
}
export const ThemeContext = /*#__PURE__*/createContext({
  theme: Themes.Light,
  setTheme: () => {}
});
export const ThemeProvider = ({
  children
}) => {
  const [theme, updateTheme] = useReducer(handleThemeChange, {
    theme: Themes.Light,
    setTheme: value => {
      updateTheme({
        theme: value
      });
      localStorage.setItem('cosmology-ui-theme', value);
    }
  });
  useEffect(() => {
    const currentTheme = localStorage.getItem('cosmology-ui-theme');
    if (currentTheme && theme.theme !== currentTheme) {
      theme.setTheme(currentTheme);
    }
    if (!currentTheme) {
      theme.setTheme(theme.theme);
    }
  }, []);
  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {
    value: theme
  }, children);
};
export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('You have forgot to use ThemeProvider.');
  }
  return context;
};