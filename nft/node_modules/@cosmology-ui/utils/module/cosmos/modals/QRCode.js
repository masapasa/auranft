import { Box, Center, IconButton, Skeleton, Stack, Text } from '@chakra-ui/react';
import { QRCodeSVG } from 'qrcode.react';
import React, { useContext, useEffect, useRef, useState } from 'react';
import { IoReloadOutline } from 'react-icons/io5';
import { AnimateBox, QRCodeStatus, ThemeContext } from '../../index';
export const QRCodeSkeleton = () => /*#__PURE__*/React.createElement(Center, {
  flexDirection: "column",
  w: "full",
  maxW: 72,
  minH: 40,
  px: 6,
  textAlign: "center"
}, /*#__PURE__*/React.createElement(Skeleton, {
  w: 48,
  h: 48,
  borderRadius: "base"
}));
export const QRCodeDisplayError = ({
  theme,
  qrCodeSize,
  onRefresh
}) => {
  return /*#__PURE__*/React.createElement(Center, {
    className: "qr-code"
  }, /*#__PURE__*/React.createElement(Box, {
    className: "qr-code-blur",
    filter: "auto",
    blur: "md"
  }), /*#__PURE__*/React.createElement(Center, {
    className: "qr-code-refresh-button-box"
  }, /*#__PURE__*/React.createElement(IconButton, {
    className: "qr-code-refresh-button",
    "aria-label": "refresh-button",
    icon: /*#__PURE__*/React.createElement(IoReloadOutline, null),
    size: "lg",
    onClick: onRefresh
  })), /*#__PURE__*/React.createElement(QRCodeSVG, {
    className: "qr-code-svg",
    value: 'https://',
    size: qrCodeSize,
    bgColor: `var(--chakra-colors-qr-code-qr-background-color-${theme})`,
    fgColor: `var(--chakra-colors-qr-code-qr-text-color-${theme})`,
    level: 'L',
    includeMargin: false
  }));
};
export const QRCodeBaseStyle = (theme, status) => {
  return {
    w: 80,
    justifyContent: 'center',
    alignItems: 'center',
    spacing: 4,
    p: 6,
    pb: 10,
    '>.qr-code-description': {
      fontWeight: 'medium',
      textAlign: 'center',
      opacity: 0.75,
      px: 4,
      pb: 1.5
    },
    '>.qr-code': {
      position: 'relative',
      w: 'full',
      border: '1px solid',
      borderColor: `qr-code-border-color-${theme}`,
      borderRadius: 'lg',
      boxShadow: `qr-code-shadow-${theme}`,
      p: 5,
      '>.qr-code-refresh-button-box': {
        position: 'absolute',
        w: 'full',
        h: 'full',
        zIndex: 3,
        '>.qr-code-refresh-button': {
          bg: `qr-code-qr-background-color-${theme}`,
          color: `qr-code-qr-text-color-${theme}`,
          borderRadius: 'full',
          boxShadow: `qr-code-button-shadow-${theme}`
        }
      },
      '>.qr-code-blur': {
        position: 'absolute',
        w: 'full',
        h: 'full',
        zIndex: 2,
        borderRadius: 'lg',
        blur: 'md',
        bg: `qr-code-qr-blur-background-color-${theme}`
      },
      '>.qr-code-svg': {
        opacity: 0.5
      }
    },
    '>.qr-code-error-title': {
      fontWeight: 'medium',
      textAlign: 'center',
      pt: 2,
      '&.qr-code-error': {
        color: `qr-code-qr-error-text-color-${theme}`
      },
      '&.qr-code-expired': {
        color: `qr-code-qr-expired-text-color-${theme}`
      }
    },
    '>.qr-code-error-desc-box': {
      position: 'relative',
      '>.qr-code-error-desc': {
        maxH: 16,
        px: 1,
        overflowX: 'hidden',
        overflowY: 'auto',
        scrollbarWidth: 'none',
        // For Firefox
        '&::-webkit-scrollbar': {
          // For Chrome and other browsers except Firefox
          display: 'none'
        },
        fontSize: 'sm',
        fontWeight: 'base',
        textAlign: 'center',
        lineHeight: 'shorter',
        opacity: 0.75
      },
      '>.qr-code-error-desc-animate-shadow': {
        position: 'absolute',
        left: 0,
        bottom: 0,
        w: 'full',
        bg: `qr-code-shadow-background-color-${theme}`
      }
    }
  };
};
export const QRCode = ({
  status,
  link,
  description,
  qrCodeSize = 230,
  errorTitle,
  errorDesc,
  className,
  styleProps,
  onRefresh
}) => {
  const {
    theme
  } = useContext(ThemeContext);
  const descRef = useRef(null);
  const [displayBlur, setDisplayBlur] = useState(false);
  useEffect(() => {
    if (descRef.current) {
      if (descRef.current.clientHeight >= 64) setDisplayBlur(true);
      if (descRef.current.clientHeight < 64) setDisplayBlur(false);
      const scrollHandler = () => {
        const height = Math.abs(descRef.current.scrollHeight - descRef.current.clientHeight - descRef.current.scrollTop);
        if (height < 1) setDisplayBlur(false);
        if (height >= 1) setDisplayBlur(true);
      };
      descRef.current.addEventListener('scroll', scrollHandler);
    }
  }, [descRef, errorDesc]);
  return /*#__PURE__*/React.createElement(Stack, {
    className: className,
    sx: styleProps ? styleProps : QRCodeBaseStyle(theme, status)
  }, description ? /*#__PURE__*/React.createElement(Text, {
    className: "qr-code-description"
  }, description) : undefined, status === QRCodeStatus.Pending ? /*#__PURE__*/React.createElement(QRCodeSkeleton, null) : undefined, status === QRCodeStatus.Done ? /*#__PURE__*/React.createElement(Center, {
    className: "qr-code"
  }, /*#__PURE__*/React.createElement(QRCodeSVG, {
    value: link,
    size: qrCodeSize,
    bgColor: `var(--chakra-colors-qr-code-qr-background-color-${theme})`,
    fgColor: `var(--chakra-colors-qr-code-qr-text-color-${theme})`,
    level: 'L',
    includeMargin: false
  })) : undefined, status === QRCodeStatus.Error || status === QRCodeStatus.Expired ? /*#__PURE__*/React.createElement(QRCodeDisplayError, {
    theme: theme,
    qrCodeSize: qrCodeSize,
    onRefresh: onRefresh
  }) : undefined, errorTitle ? /*#__PURE__*/React.createElement(Text, {
    className: `qr-code-error-title ${status === QRCodeStatus.Error ? 'qr-code-error' : ''} ${status === QRCodeStatus.Expired ? 'qr-code-expired' : ''}`
  }, errorTitle) : undefined, errorDesc ? /*#__PURE__*/React.createElement(Box, {
    className: "qr-code-error-desc-box"
  }, /*#__PURE__*/React.createElement(Box, {
    ref: descRef,
    className: "qr-code-error-desc"
  }, /*#__PURE__*/React.createElement(Text, null, errorDesc)), /*#__PURE__*/React.createElement(AnimateBox, {
    className: "qr-code-error-desc-animate-shadow",
    initial: false,
    animate: displayBlur ? {
      opacity: 1,
      height: 28,
      transition: {
        type: 'spring',
        duration: 0.1
      }
    } : {
      height: 0,
      opacity: 0,
      transition: {
        type: 'spring',
        duration: 0.2
      }
    }
  })) : undefined);
};