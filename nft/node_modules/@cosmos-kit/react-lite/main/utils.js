"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChainWalletContext = getChainWalletContext;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _core = require("@cosmos-kit/core");
function getChainWalletContext(chainId, wallet) {
  var _wallet$client, _wallet$client2;
  var sync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  function walletAssert(func) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var name = arguments.length > 2 ? arguments[2] : undefined;
    if (!wallet) {
      throw new Error("Wallet is undefined. Please choose a wallet to connect first.");
    }
    if (!func) {
      throw new Error("Function ".concat(name, " not implemented by ").concat(wallet === null || wallet === void 0 ? void 0 : wallet.walletInfo.prettyName, " yet."));
    }
    return func.apply(void 0, (0, _toConsumableArray2["default"])(params));
  }
  function clientMethodAssert(func) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var name = arguments.length > 2 ? arguments[2] : undefined;
    if (!wallet) {
      throw new Error("Wallet is undefined. Please choose a wallet to connect first.");
    }
    if (!(wallet !== null && wallet !== void 0 && wallet.client)) {
      throw new Error("Wallet Client is undefined.");
    }
    if (!func) {
      throw new Error("Function ".concat(name, " not implemented by ").concat(wallet === null || wallet === void 0 ? void 0 : wallet.walletInfo.prettyName, " Client yet."));
    }
    return func.apply(void 0, (0, _toConsumableArray2["default"])(params));
  }
  var status = (wallet === null || wallet === void 0 ? void 0 : wallet.walletStatus) || _core.WalletStatus.Disconnected;
  return {
    chainWallet: wallet,
    chain: wallet === null || wallet === void 0 ? void 0 : wallet.chainRecord.chain,
    assets: wallet === null || wallet === void 0 ? void 0 : wallet.chainRecord.assetList,
    logoUrl: wallet === null || wallet === void 0 ? void 0 : wallet.chainLogoUrl,
    wallet: wallet === null || wallet === void 0 ? void 0 : wallet.walletInfo,
    address: wallet === null || wallet === void 0 ? void 0 : wallet.address,
    username: wallet === null || wallet === void 0 ? void 0 : wallet.username,
    message: wallet ? wallet.message : 'No wallet is connected walletly.',
    status: status,
    isWalletDisconnected: status === 'Disconnected',
    isWalletConnecting: status === 'Connecting',
    isWalletConnected: status === 'Connected',
    isWalletRejected: status === 'Rejected',
    isWalletNotExist: status === 'NotExist',
    isWalletError: status === 'Error',
    connect: function connect() {
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.connect, [void 0, sync], 'connect');
    },
    disconnect: function disconnect() {
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.disconnect, [void 0, sync], 'disconnect');
    },
    getRpcEndpoint: function getRpcEndpoint(isLazy) {
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.getRpcEndpoint, [isLazy], 'getRpcEndpoint');
    },
    getRestEndpoint: function getRestEndpoint(isLazy) {
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.getRestEndpoint, [isLazy], 'getRestEndpoint');
    },
    getStargateClient: function getStargateClient() {
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.getStargateClient, [], 'getStargateClient');
    },
    getCosmWasmClient: function getCosmWasmClient() {
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.getCosmWasmClient, [], 'getCosmWasmClient');
    },
    getSigningStargateClient: function getSigningStargateClient() {
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.getSigningStargateClient, [], 'getSigningStargateClient');
    },
    getSigningCosmWasmClient: function getSigningCosmWasmClient() {
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.getSigningCosmWasmClient, [], 'getSigningCosmWasmClient');
    },
    getNameService: function getNameService() {
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.getNameService, [], 'getNameService');
    },
    estimateFee: function estimateFee() {
      for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
        params[_key] = arguments[_key];
      }
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.estimateFee, params, 'estimateFee');
    },
    sign: function sign() {
      for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        params[_key2] = arguments[_key2];
      }
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.sign, params, 'sign');
    },
    broadcast: function broadcast() {
      for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        params[_key3] = arguments[_key3];
      }
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.broadcast, params, 'broadcast');
    },
    signAndBroadcast: function signAndBroadcast() {
      for (var _len4 = arguments.length, params = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        params[_key4] = arguments[_key4];
      }
      return walletAssert(wallet === null || wallet === void 0 ? void 0 : wallet.signAndBroadcast, params, 'signAndBroadcast');
    },
    qrUrl: wallet === null || wallet === void 0 ? void 0 : (_wallet$client = wallet.client) === null || _wallet$client === void 0 ? void 0 : _wallet$client.qrUrl,
    appUrl: wallet === null || wallet === void 0 ? void 0 : (_wallet$client2 = wallet.client) === null || _wallet$client2 === void 0 ? void 0 : _wallet$client2.appUrl,
    enable: function enable() {
      var _wallet$client3;
      return clientMethodAssert(wallet === null || wallet === void 0 ? void 0 : (_wallet$client3 = wallet.client) === null || _wallet$client3 === void 0 ? void 0 : _wallet$client3.enable.bind(wallet.client), [chainId], 'enable');
    },
    suggestToken: function suggestToken() {
      var _wallet$client4;
      for (var _len5 = arguments.length, params = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        params[_key5] = arguments[_key5];
      }
      return clientMethodAssert(wallet === null || wallet === void 0 ? void 0 : (_wallet$client4 = wallet.client) === null || _wallet$client4 === void 0 ? void 0 : _wallet$client4.suggestToken.bind(wallet.client), [].concat(params), 'suggestToken');
    },
    getAccount: function getAccount() {
      var _wallet$client5;
      return clientMethodAssert(wallet === null || wallet === void 0 ? void 0 : (_wallet$client5 = wallet.client) === null || _wallet$client5 === void 0 ? void 0 : _wallet$client5.getAccount.bind(wallet.client), [chainId], 'getAccount');
    },
    getOfflineSigner: function getOfflineSigner() {
      var _wallet$client6;
      return clientMethodAssert(wallet === null || wallet === void 0 ? void 0 : (_wallet$client6 = wallet.client) === null || _wallet$client6 === void 0 ? void 0 : _wallet$client6.getOfflineSigner.bind(wallet.client), [chainId, wallet === null || wallet === void 0 ? void 0 : wallet.preferredSignType], 'getOfflineSigner');
    },
    getOfflineSignerAmino: function getOfflineSignerAmino() {
      var _wallet$client7;
      return clientMethodAssert(wallet === null || wallet === void 0 ? void 0 : (_wallet$client7 = wallet.client) === null || _wallet$client7 === void 0 ? void 0 : _wallet$client7.getOfflineSignerAmino.bind(wallet.client), [chainId], 'getOfflineSignerAmino');
    },
    getOfflineSignerDirect: function getOfflineSignerDirect() {
      var _wallet$client8;
      return clientMethodAssert(wallet === null || wallet === void 0 ? void 0 : (_wallet$client8 = wallet.client) === null || _wallet$client8 === void 0 ? void 0 : _wallet$client8.getOfflineSignerDirect.bind(wallet.client), [chainId], 'getOfflineSignerDirect');
    },
    signAmino: function signAmino() {
      var _wallet$client9;
      for (var _len6 = arguments.length, params = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        params[_key6] = arguments[_key6];
      }
      return clientMethodAssert(wallet === null || wallet === void 0 ? void 0 : (_wallet$client9 = wallet.client) === null || _wallet$client9 === void 0 ? void 0 : _wallet$client9.signAmino.bind(wallet.client), [chainId].concat(params), 'signAmino');
    },
    signDirect: function signDirect() {
      var _wallet$client10;
      for (var _len7 = arguments.length, params = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        params[_key7] = arguments[_key7];
      }
      return clientMethodAssert(wallet === null || wallet === void 0 ? void 0 : (_wallet$client10 = wallet.client) === null || _wallet$client10 === void 0 ? void 0 : _wallet$client10.signDirect.bind(wallet.client), [chainId].concat(params), 'signDirect');
    },
    signArbitrary: function signArbitrary() {
      var _wallet$client11;
      for (var _len8 = arguments.length, params = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        params[_key8] = arguments[_key8];
      }
      return clientMethodAssert(wallet === null || wallet === void 0 ? void 0 : (_wallet$client11 = wallet.client) === null || _wallet$client11 === void 0 ? void 0 : _wallet$client11.signArbitrary.bind(wallet.client), [chainId].concat(params), 'signArbitrary');
    },
    sendTx: function sendTx() {
      var _wallet$client12;
      for (var _len9 = arguments.length, params = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        params[_key9] = arguments[_key9];
      }
      return clientMethodAssert(wallet === null || wallet === void 0 ? void 0 : (_wallet$client12 = wallet.client) === null || _wallet$client12 === void 0 ? void 0 : _wallet$client12.sendTx.bind(wallet.client), [chainId].concat(params), 'sendTx');
    }
  };
}