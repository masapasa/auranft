"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChain = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _provider = require("../provider");
var _utils = require("../utils");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var useChain = function useChain(chainName) {
  var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var context = _react["default"].useContext(_provider.walletContext);
  if (!context) {
    throw new Error('You have forgot to use ChainProvider.');
  }
  var walletManager = context.walletManager,
    modalProvided = context.modalProvided;
  if (!modalProvided) {
    throw new Error('You have to provide `walletModal` to use `useChain`, or use `useChainWallet` instead.');
  }
  var walletRepo = walletManager.getWalletRepo(chainName);
  walletRepo.activate();
  var _connect = walletRepo.connect,
    _disconnect = walletRepo.disconnect,
    openView = walletRepo.openView,
    closeView = walletRepo.closeView,
    current = walletRepo.current,
    _walletRepo$chainReco = walletRepo.chainRecord,
    chain = _walletRepo$chainReco.chain,
    assetList = _walletRepo$chainReco.assetList,
    getRpcEndpoint = walletRepo.getRpcEndpoint,
    getRestEndpoint = walletRepo.getRestEndpoint,
    getStargateClient = walletRepo.getStargateClient,
    getCosmWasmClient = walletRepo.getCosmWasmClient,
    getNameService = walletRepo.getNameService;
  var chainWalletContext = (0, _utils.getChainWalletContext)(chain.chain_id, current, sync);
  return _objectSpread(_objectSpread({}, chainWalletContext), {}, {
    walletRepo: walletRepo,
    chain: chain,
    assets: assetList,
    openView: openView,
    closeView: closeView,
    connect: function connect() {
      return _connect(void 0, sync);
    },
    disconnect: function disconnect() {
      return _disconnect(void 0, sync);
    },
    getRpcEndpoint: getRpcEndpoint,
    getRestEndpoint: getRestEndpoint,
    getStargateClient: getStargateClient,
    getCosmWasmClient: getCosmWasmClient,
    getNameService: getNameService
  });
};
exports.useChain = useChain;