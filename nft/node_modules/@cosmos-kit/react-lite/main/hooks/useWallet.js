"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWallet = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _core = require("@cosmos-kit/core");
var _react = _interopRequireDefault(require("react"));
var _provider = require("../provider");
var useWallet = function useWallet(walletName) {
  var activeOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var context = _react["default"].useContext(_provider.walletContext);
  if (!context) {
    throw new Error('You have forgot to use ChainProvider.');
  }
  var walletManager = context.walletManager;
  var mainWallet = walletName ? walletManager.getMainWallet(walletName) : walletManager.mainWallets.find(function (w) {
    return w.isActive;
  });
  if (!mainWallet) {
    return {
      mainWallet: mainWallet,
      chainWallets: [],
      wallet: void 0,
      status: _core.WalletStatus.Disconnected,
      message: void 0
    };
  }
  var walletInfo = mainWallet.walletInfo,
    getChainWalletList = mainWallet.getChainWalletList,
    getGlobalStatusAndMessage = mainWallet.getGlobalStatusAndMessage;
  var _getGlobalStatusAndMe = getGlobalStatusAndMessage(activeOnly),
    _getGlobalStatusAndMe2 = (0, _slicedToArray2["default"])(_getGlobalStatusAndMe, 2),
    globalStatus = _getGlobalStatusAndMe2[0],
    globalMessage = _getGlobalStatusAndMe2[1];
  return {
    mainWallet: mainWallet,
    chainWallets: getChainWalletList(activeOnly),
    wallet: walletInfo,
    status: globalStatus,
    message: globalMessage
  };
};
exports.useWallet = useWallet;