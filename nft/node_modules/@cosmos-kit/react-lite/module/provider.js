import { Logger, State, WalletManager } from '@cosmos-kit/core';
import React, { createContext, useEffect, useMemo, useState } from 'react';
export const walletContext = /*#__PURE__*/createContext(null);
export const ChainProvider = ({
  chains,
  assetLists,
  wallets,
  walletModal: ProvidedWalletModal,
  throwErrors = false,
  defaultNameService = 'icns',
  walletConnectOptions,
  signerOptions,
  endpointOptions,
  sessionOptions,
  logLevel = 'WARN',
  children
}) => {
  const logger = useMemo(() => new Logger(logLevel), []);
  const walletManager = useMemo(() => new WalletManager(chains, assetLists, wallets, logger, throwErrors, defaultNameService, walletConnectOptions, signerOptions, endpointOptions, sessionOptions), []);
  const [isViewOpen, setViewOpen] = useState(false);
  const [viewWalletRepo, setViewWalletRepo] = useState();
  const [, setData] = useState();
  const [, setState] = useState(State.Init);
  const [, setMsg] = useState();
  const [, setClientState] = useState(State.Init);
  walletManager.setActions({
    viewOpen: setViewOpen,
    viewWalletRepo: setViewWalletRepo,
    data: setData,
    state: setState,
    message: setMsg
  });
  walletManager.walletRepos.forEach(wr => {
    wr.setActions({
      viewOpen: setViewOpen,
      viewWalletRepo: setViewWalletRepo
    });
    wr.wallets.forEach(w => {
      w.setActions({
        data: setData,
        state: setState,
        message: setMsg
      });
    });
  });
  walletManager.mainWallets.forEach(w => {
    w.setActions({
      data: setData,
      state: setState,
      message: setMsg,
      clientState: setClientState
    });
  });
  useEffect(() => {
    walletManager.onMounted();
    return () => {
      setViewOpen(false);
      walletManager.onUnmounted();
    };
  }, []);
  return /*#__PURE__*/React.createElement(walletContext.Provider, {
    value: {
      walletManager,
      modalProvided: Boolean(ProvidedWalletModal)
    }
  }, ProvidedWalletModal && /*#__PURE__*/React.createElement(ProvidedWalletModal, {
    isOpen: isViewOpen,
    setOpen: setViewOpen,
    walletRepo: viewWalletRepo
  }), children);
};