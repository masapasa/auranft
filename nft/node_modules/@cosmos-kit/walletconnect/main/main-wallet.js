"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WCWallet = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _core = require("@cosmos-kit/core");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var WCWallet = /*#__PURE__*/function (_MainWalletBase) {
  (0, _inherits2["default"])(WCWallet, _MainWalletBase);
  var _super = _createSuper(WCWallet);
  function WCWallet(walletInfo, ChainWC, WCClient) {
    var _this;
    (0, _classCallCheck2["default"])(this, WCWallet);
    if (!walletInfo.walletconnect) {
      throw new Error("'walletconnect' info for wallet ".concat(walletInfo.prettyName, " is not provided in wallet registry."));
    }
    _this = _super.call(this, walletInfo, ChainWC);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "WCClient", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "clientMutable", {
      state: _core.State.Init
    });
    _this.WCClient = WCClient;
    return _this;
  }
  (0, _createClass2["default"])(WCWallet, [{
    key: "initClient",
    value: function () {
      var _initClient = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(options) {
        var client, _this$logger;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (options) {
                _context.next = 3;
                break;
              }
              this.initClientError(new Error('`walletconnectOptions` is not provided.'));
              return _context.abrupt("return");
            case 3:
              if (options.signClient.projectId) {
                _context.next = 6;
                break;
              }
              this.initClientError(new Error('`projectId` is not provided in `walletconnectOptions`.'));
              return _context.abrupt("return");
            case 6:
              this.initingClient();
              _context.prev = 7;
              client = new this.WCClient(this.walletInfo);
              client.logger = this.logger;
              client.emitter = this.emitter;
              client.env = this.env;
              client.options = options;
              _context.next = 15;
              return client.init();
            case 15:
              this.initClientDone(client);
              _context.next = 22;
              break;
            case 18:
              _context.prev = 18;
              _context.t0 = _context["catch"](7);
              (_this$logger = this.logger) === null || _this$logger === void 0 ? void 0 : _this$logger.error(_context.t0);
              this.initClientError(_context.t0);
            case 22:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[7, 18]]);
      }));
      function initClient(_x) {
        return _initClient.apply(this, arguments);
      }
      return initClient;
    }()
  }]);
  return WCWallet;
}(_core.MainWalletBase);
exports.WCWallet = WCWallet;