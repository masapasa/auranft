"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidEndpoint = exports.getIsLazy = exports.getFastestEndpoint = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _axios = _interopRequireDefault(require("axios"));
var _getValidEndpoint = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(endpoint, nodeType, logger) {
    var valid;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return isValidEndpoint(endpoint, nodeType, false, logger);
        case 2:
          valid = _context.sent;
          if (!(valid === false)) {
            _context.next = 7;
            break;
          }
          return _context.abrupt("return", Promise.reject('Invalid endpoint.'));
        case 7:
          return _context.abrupt("return", endpoint);
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function _getValidEndpoint(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var getFastestEndpoint = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(endpoints, nodeType, logger) {
    var fastestEndpoint;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return Promise.any(endpoints.map(function (endpoint) {
            return _getValidEndpoint(endpoint, nodeType, logger);
          }));
        case 3:
          fastestEndpoint = _context2.sent;
          logger === null || logger === void 0 ? void 0 : logger.debug('rpcEndpoint won the race:', fastestEndpoint);
          return _context2.abrupt("return", fastestEndpoint);
        case 8:
          _context2.prev = 8;
          _context2.t0 = _context2["catch"](0);
          return _context2.abrupt("return", Promise.reject(_context2.t0));
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 8]]);
  }));
  return function getFastestEndpoint(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
exports.getFastestEndpoint = getFastestEndpoint;
var isValidEndpoint = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(endpoint, nodeType, isLazy, logger) {
    var response;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (!isLazy) {
            _context3.next = 3;
            break;
          }
          logger === null || logger === void 0 ? void 0 : logger.debug('Skipping test of accessibility for', endpoint);
          return _context3.abrupt("return", true);
        case 3:
          logger === null || logger === void 0 ? void 0 : logger.debug('Testing accessibility of', endpoint);
          _context3.prev = 4;
          if (!(typeof endpoint === 'string')) {
            _context3.next = 18;
            break;
          }
          if (!(nodeType === 'rest')) {
            _context3.next = 12;
            break;
          }
          _context3.next = 9;
          return _axios["default"].get("".concat(endpoint, "/cosmos/base/tendermint/v1beta1/node_info"));
        case 9:
          _context3.t0 = _context3.sent;
          _context3.next = 15;
          break;
        case 12:
          _context3.next = 14;
          return _axios["default"].post(endpoint);
        case 14:
          _context3.t0 = _context3.sent;
        case 15:
          response = _context3.t0;
          _context3.next = 28;
          break;
        case 18:
          if (!(nodeType === 'rest')) {
            _context3.next = 24;
            break;
          }
          _context3.next = 21;
          return _axios["default"].get("".concat(endpoint.url, "/cosmos/base/tendermint/v1beta1/node_info"), {
            headers: endpoint.headers
          });
        case 21:
          _context3.t1 = _context3.sent;
          _context3.next = 27;
          break;
        case 24:
          _context3.next = 26;
          return _axios["default"].post(endpoint.url, {
            headers: endpoint.headers
          });
        case 26:
          _context3.t1 = _context3.sent;
        case 27:
          response = _context3.t1;
        case 28:
          if (!(response.status == 200)) {
            _context3.next = 31;
            break;
          }
          logger === null || logger === void 0 ? void 0 : logger.debug('Access successfully.');
          return _context3.abrupt("return", true);
        case 31:
          _context3.next = 36;
          break;
        case 33:
          _context3.prev = 33;
          _context3.t2 = _context3["catch"](4);
          logger === null || logger === void 0 ? void 0 : logger.debug("".concat(_context3.t2.name, ": ").concat(_context3.t2.message));
        case 36:
          logger === null || logger === void 0 ? void 0 : logger.debug('Access failed.');
          return _context3.abrupt("return", false);
        case 38:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[4, 33]]);
  }));
  return function isValidEndpoint(_x7, _x8, _x9, _x10) {
    return _ref3.apply(this, arguments);
  };
}();
exports.isValidEndpoint = isValidEndpoint;
var getIsLazy = function getIsLazy(globalIsLazy, chainIsLazy, endpointIsLazy, parameterIsLazy, logger) {
  // logger?.debug(
  //   'Value of globalIsLazy, chainIsLazy, endpointIsLazy and parameterIsLazy:',
  //   globalIsLazy,
  //   chainIsLazy,
  //   endpointIsLazy,
  //   parameterIsLazy
  // );
  if (typeof parameterIsLazy !== 'undefined') {
    return parameterIsLazy;
  }
  if (typeof endpointIsLazy !== 'undefined') {
    return endpointIsLazy;
  }
  if (typeof chainIsLazy !== 'undefined') {
    return chainIsLazy;
  }
  if (typeof globalIsLazy !== 'undefined') {
    return globalIsLazy;
  }
  return false;
};
exports.getIsLazy = getIsLazy;