import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-console */

import { State } from '../types';
import { ClientNotExistError, RejectedError } from '../utils';
import { StateBase } from './state';
export class WalletBase extends StateBase {
  constructor(walletInfo) {
    super();
    _defineProperty(this, "clientMutable", {
      state: State.Init
    });
    _defineProperty(this, "emitter", void 0);
    _defineProperty(this, "_walletInfo", void 0);
    _defineProperty(this, "callbacks", void 0);
    _defineProperty(this, "session", void 0);
    _defineProperty(this, "walletConnectOptions", void 0);
    /**
     * isActive in mainWallet is not like chainWallet
     * - mainWallet: activated when connected
     * - chainWallet: activated when called by hooks (useChain, useChainWallet etc)
     */
    _defineProperty(this, "isActive", false);
    _defineProperty(this, "throwErrors", false);
    _defineProperty(this, "_disconnect", async sync => {
      await this.callbacks?.beforeDisconnect?.();
      await this.client?.disconnect?.();
      this.reset();
      window.localStorage.removeItem('cosmos-kit@1:core//current-wallet');
      if (sync) {
        this.emitter?.emit('sync_disconnect', this.chainName);
        this.logger?.debug('[WALLET EVENT] Emit `sync_disconnect`');
      }
      await this.callbacks?.afterDisconnect?.();
    });
    _defineProperty(this, "disconnect", async sync => {
      await this._disconnect(sync);
    });
    _defineProperty(this, "connect", async sync => {
      await this.callbacks?.beforeConnect?.();
      const mobileDisabled = typeof this.walletInfo.mobileDisabled === 'boolean' ? this.walletInfo.mobileDisabled : this.walletInfo.mobileDisabled();
      if (this.isMobile && mobileDisabled) {
        this.setError('This wallet is not supported on mobile, please use desktop browsers.');
        return;
      }
      if (sync) {
        this.emitter?.emit('sync_connect', this.chainName);
        this.logger?.debug('[WALLET EVENT] Emit `sync_connect`');
      }
      try {
        if (!this.client) {
          this.setState(State.Pending);
          this.setMessage('InitClient');
          await this.initClient(this.walletInfo.mode === 'wallet-connect' ? this.walletConnectOptions : void 0);
          this.emitter?.emit('broadcast_client', this.client);
          this.logger?.debug('[WALLET EVENT] Emit `broadcast_client`');
          if (!this.client) {
            this.setClientNotExist();
            return;
          }
        }
        await this.update();
      } catch (error) {
        this.setError(error);
      }
      await this.callbacks?.afterConnect?.();
    });
    this._walletInfo = walletInfo;
  }
  get appUrl() {
    return this.client?.appUrl;
  }
  get qrUrl() {
    return this.client?.qrUrl;
  }
  activate() {
    this.isActive = true;
  }
  inactivate() {
    this.isActive = false;
  }
  get client() {
    return this.clientMutable?.data;
  }
  initingClient() {
    this.clientMutable.state = State.Pending;
  }
  initClientDone(client) {
    this.clientMutable.data = client;
    this.clientMutable.state = State.Done;
  }
  initClientError(error) {
    this.clientMutable.message = error?.message;
    this.clientMutable.state = State.Error;
  }
  get walletInfo() {
    return this._walletInfo;
  }
  get downloadInfo() {
    let downloads = this.walletInfo.downloads || [];
    downloads = downloads.filter(d => d.device === this.env?.device || !d.device);
    if (downloads.length === 1) {
      return downloads[0];
    }
    downloads = downloads.filter(d => d.os === this.env?.os || !d.os);
    if (downloads.length === 1) {
      return downloads[0];
    }
    downloads = downloads.filter(d => d.browser === this.env?.browser || !d.browser);
    return downloads[0];
  }
  get walletName() {
    return this.walletInfo.name;
  }
  get walletPrettyName() {
    return this.walletInfo.prettyName;
  }
  get rejectMessageSource() {
    if (typeof this.walletInfo.rejectMessage === 'string') {
      return this.walletInfo.rejectMessage;
    } else {
      return this.walletInfo.rejectMessage?.source;
    }
  }
  get rejectMessageTarget() {
    if (typeof this.walletInfo.rejectMessage === 'string') {
      return void 0;
    } else {
      return this.walletInfo.rejectMessage?.target;
    }
  }
  get rejectCode() {
    return this.walletInfo.rejectCode;
  }
  rejectMatched(e) {
    return this.rejectMessageSource && e.message === this.rejectMessageSource || this.rejectCode && e.code === this.rejectCode;
  }
  updateCallbacks(callbacks) {
    this.callbacks = _objectSpread(_objectSpread({}, this.callbacks), callbacks);
  }
  setClientNotExist() {
    this.setState(State.Error);
    this.setMessage(ClientNotExistError.message);
    if (this.throwErrors) {
      throw new Error(this.message);
    }
  }
  setRejected() {
    this.setState(State.Error);
    this.setMessage(RejectedError.message);
    if (this.throwErrors) {
      throw new Error(this.message);
    }
  }
  setError(e) {
    this.setState(State.Error);
    this.setMessage(typeof e === 'string' ? e : e?.message);
    if (typeof e !== 'string' && e?.stack) {
      this.logger?.error(e.stack);
    }
    if (this.throwErrors) {
      throw new Error(this.message);
    }
  }
}