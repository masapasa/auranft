"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StateBase = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _types = require("../types");
var _utils = require("../utils");
var StateBase = /*#__PURE__*/function () {
  function StateBase() {
    var _this = this;
    (0, _classCallCheck2["default"])(this, StateBase);
    (0, _defineProperty2["default"])(this, "_mutable", void 0);
    (0, _defineProperty2["default"])(this, "actions", void 0);
    (0, _defineProperty2["default"])(this, "_env", void 0);
    (0, _defineProperty2["default"])(this, "logger", void 0);
    (0, _defineProperty2["default"])(this, "setActions", function (actions) {
      _this.actions = actions;
    });
    this._mutable = {
      state: _types.State.Init
    };
  }
  (0, _createClass2["default"])(StateBase, [{
    key: "env",
    get: function get() {
      return this._env;
    }
  }, {
    key: "setEnv",
    value: function setEnv(env) {
      this._env = env;
    }
  }, {
    key: "isMobile",
    get: function get() {
      var _this$env;
      return ((_this$env = this.env) === null || _this$env === void 0 ? void 0 : _this$env.device) === 'mobile';
    }
  }, {
    key: "mutable",
    get: function get() {
      return this._mutable;
    }
  }, {
    key: "state",
    get: function get() {
      return this.mutable.state;
    }
  }, {
    key: "isInit",
    get: function get() {
      return this.state === 'Init';
    }
  }, {
    key: "isDone",
    get: function get() {
      return this.state === 'Done';
    }
  }, {
    key: "isError",
    get: function get() {
      return this.state === 'Error';
    }
  }, {
    key: "isPending",
    get: function get() {
      return this.state === 'Pending';
    }
  }, {
    key: "data",
    get: function get() {
      return this.mutable.data;
    }
  }, {
    key: "message",
    get: function get() {
      return this.mutable.message;
    }
  }, {
    key: "setState",
    value: function setState(state) {
      var _this$actions, _this$actions$state;
      this._mutable.state = state;
      (_this$actions = this.actions) === null || _this$actions === void 0 ? void 0 : (_this$actions$state = _this$actions.state) === null || _this$actions$state === void 0 ? void 0 : _this$actions$state.call(_this$actions, state);
    }
  }, {
    key: "setData",
    value: function setData(data) {
      var _this$actions2, _this$actions2$data;
      this._mutable.data = data;
      (_this$actions2 = this.actions) === null || _this$actions2 === void 0 ? void 0 : (_this$actions2$data = _this$actions2.data) === null || _this$actions2$data === void 0 ? void 0 : _this$actions2$data.call(_this$actions2, data);
    }
  }, {
    key: "setMessage",
    value: function setMessage(message) {
      var _this$actions3, _this$actions3$messag;
      this._mutable.message = message;
      (_this$actions3 = this.actions) === null || _this$actions3 === void 0 ? void 0 : (_this$actions3$messag = _this$actions3.message) === null || _this$actions3$messag === void 0 ? void 0 : _this$actions3$messag.call(_this$actions3, message);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.setData(undefined);
      this.setMessage(undefined);
      this.setState(_types.State.Init);
    }
  }, {
    key: "walletStatus",
    get: function get() {
      return (0, _utils.getWalletStatusFromState)(this.state, this.message);
    }
  }, {
    key: "isWalletOnceConnect",
    get: function get() {
      return this.isWalletConnected || this.isWalletNotExist || this.isWalletError;
    }
  }, {
    key: "isWalletConnecting",
    get: function get() {
      return this.walletStatus === 'Connecting';
    }
  }, {
    key: "isWalletConnected",
    get: function get() {
      return this.walletStatus === 'Connected';
    }
  }, {
    key: "isWalletDisconnected",
    get: function get() {
      return this.walletStatus === 'Disconnected';
    }
  }, {
    key: "isWalletRejected",
    get: function get() {
      return this.walletStatus === 'Rejected';
    }
  }, {
    key: "isWalletNotExist",
    get: function get() {
      return this.walletStatus === 'NotExist';
    }
  }, {
    key: "isWalletError",
    get: function get() {
      return this.walletStatus === 'Error';
    }
  }]);
  return StateBase;
}();
exports.StateBase = StateBase;