import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import { getIsLazy } from './endpoint';
export function convertChain(chain, assetLists, signerOptions, preferredEndpoints, isLazy, logger) {
  const assetList = assetLists.find(list => list.chain_name === chain.chain_name);
  return {
    name: chain.chain_name,
    chain,
    assetList,
    clientOptions: {
      stargate: signerOptions?.stargate?.(chain),
      signingStargate: signerOptions?.signingStargate?.(chain),
      signingCosmwasm: signerOptions?.signingCosmwasm?.(chain),
      preferredSignType: signerOptions?.preferredSignType?.(chain) || 'amino'
    },
    preferredEndpoints: _objectSpread(_objectSpread({}, preferredEndpoints), {}, {
      isLazy: getIsLazy(isLazy, preferredEndpoints?.isLazy, void 0, void 0, logger)
    })
  };
}