"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WalletListView = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("@cosmology-ui/react");
var _react2 = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var WalletListView = function WalletListView(_ref) {
  var onClose = _ref.onClose,
    wallets = _ref.wallets,
    initialFocus = _ref.initialFocus;
  var defaultInitialFocus = (0, _react2.useRef)();
  var _useState = (0, _react2.useState)(true),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    isLargeScreen = _useState2[0],
    setIsLargeScreen = _useState2[1];
  var onWalletClicked = (0, _react2.useCallback)(function (wallet) {
    wallet.connect(true);
  }, []);
  (0, _react2.useEffect)(function () {
    var handleWindowResize = function handleWindowResize() {
      if (window.innerWidth >= 768) {
        setIsLargeScreen(true);
      } else {
        setIsLargeScreen(false);
      }
    };
    handleWindowResize();
    window.addEventListener('resize', handleWindowResize);
    return function () {
      window.removeEventListener('resize', handleWindowResize);
    };
  }, []);
  var modalHead = /*#__PURE__*/_react2["default"].createElement(_react.SimpleModalHead, {
    title: "Select your wallet",
    backButton: false,
    onClose: onClose
  });
  var walletsData = (0, _react2.useMemo)(function () {
    return wallets.sort(function (a, b) {
      if (a.walletInfo.mode === b.walletInfo.mode) {
        return 0;
      } else if (a.walletInfo.mode !== 'wallet-connect') {
        return -1;
      } else {
        return 1;
      }
    }).map(function (w, i) {
      return _objectSpread(_objectSpread({}, w.walletInfo), {}, {
        downloads: void 0,
        onClick: function () {
          var _onClick = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  onWalletClicked(w);
                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          function onClick() {
            return _onClick.apply(this, arguments);
          }
          return onClick;
        }(),
        buttonShape: i < 2 && isLargeScreen ? 'Square' : 'Rectangle',
        subLogo: w.walletInfo.mode === 'wallet-connect' ? 'https://user-images.githubusercontent.com/545047/202090621-bb110635-f6ce-4aa0-a4e5-a03beac29bd1.svg' : void 0
      });
    });
  }, [wallets, isLargeScreen]);
  var modalContent = /*#__PURE__*/_react2["default"].createElement(_react.SimpleDisplayWalletList, {
    initialFocus: initialFocus || defaultInitialFocus,
    walletsData: walletsData
  });
  return /*#__PURE__*/_react2["default"].createElement(_react.SimpleModalView, {
    modalHead: modalHead,
    modalContent: modalContent
  });
};
exports.WalletListView = WalletListView;