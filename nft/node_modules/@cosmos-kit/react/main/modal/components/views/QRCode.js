"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QRCodeView = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("@cosmology-ui/react");
var _core = require("@cosmos-kit/core");
var _react2 = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var QRCodeView = function QRCodeView(_ref) {
  var onClose = _ref.onClose,
    onReturn = _ref.onReturn,
    wallet = _ref.wallet;
  var prettyName = wallet.walletInfo.prettyName,
    _wallet$qrUrl = wallet.qrUrl,
    data = _wallet$qrUrl.data,
    state = _wallet$qrUrl.state,
    message = _wallet$qrUrl.message;
  var _useMemo = (0, _react2.useMemo)(function () {
      var desc = "Open ".concat(prettyName, " App to Scan");
      var errorTitle, errorDesc;
      if (state === 'Error') {
        desc = void 0;
        if (message === _core.ExpiredError.message) {
          errorTitle = 'QRCode Expired';
          errorDesc = 'Click to refresh.';
        } else {
          errorTitle = 'QRCode Error';
          errorDesc = message;
        }
      }
      var status;
      switch (state) {
        case _core.State.Pending:
          status = _react.QRCodeStatus.Pending;
          break;
        case _core.State.Done:
          status = _react.QRCodeStatus.Done;
          break;
        case _core.State.Error:
          if (message === _core.ExpiredError.message) {
            status = _react.QRCodeStatus.Expired;
          } else {
            status = _react.QRCodeStatus.Error;
          }
          break;
        default:
          status = _react.QRCodeStatus.Error;
      }
      return [desc, errorTitle, errorDesc, status];
    }, [state, message]),
    _useMemo2 = (0, _slicedToArray2["default"])(_useMemo, 4),
    desc = _useMemo2[0],
    errorTitle = _useMemo2[1],
    errorDesc = _useMemo2[2],
    status = _useMemo2[3];
  var onRefresh = (0, _react2.useCallback)(function () {
    wallet.connect(false);
  }, [wallet]);
  var modalHead = /*#__PURE__*/_react2["default"].createElement(_react.SimpleModalHead, {
    title: prettyName,
    backButton: true,
    onClose: onClose,
    onBack: onReturn
  });
  var modalContent = /*#__PURE__*/_react2["default"].createElement(_react.QRCode, {
    link: data || '',
    description: desc,
    errorTitle: errorTitle,
    errorDesc: errorDesc,
    onRefresh: onRefresh,
    status: status
  });
  return /*#__PURE__*/_react2["default"].createElement(_react.SimpleModalView, {
    modalHead: modalHead,
    modalContent: modalContent
  });
};
exports.QRCodeView = QRCodeView;