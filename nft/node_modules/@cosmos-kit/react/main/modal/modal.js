"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WalletModal = exports.DefaultModal = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("@cosmology-ui/react");
var _core = require("@cosmos-kit/core");
var _react2 = _interopRequireWildcard(require("react"));
var _components = require("./components");
var _views = require("./components/views");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var DefaultModal = function DefaultModal(_ref) {
  var isOpen = _ref.isOpen,
    setOpen = _ref.setOpen,
    walletRepo = _ref.walletRepo;
  return /*#__PURE__*/_react2["default"].createElement(_components.ChakraProviderWithGivenTheme, null, /*#__PURE__*/_react2["default"].createElement(WalletModal, {
    isOpen: isOpen,
    setOpen: setOpen,
    walletRepo: walletRepo,
    modalViews: _views.defaultModalViews
  }));
};
exports.DefaultModal = DefaultModal;
var WalletModal = function WalletModal(_ref2) {
  var _current$client, _current$client$setAc;
  var isOpen = _ref2.isOpen,
    setOpen = _ref2.setOpen,
    walletRepo = _ref2.walletRepo,
    modalViews = _ref2.modalViews,
    includeAllWalletsOnMobile = _ref2.includeAllWalletsOnMobile;
  var initialFocus = (0, _react2.useRef)();
  var _useState = (0, _react2.useState)(_core.ModalView.WalletList),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    currentView = _useState2[0],
    setCurrentView = _useState2[1];
  var _useState3 = (0, _react2.useState)(_core.State.Init),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    qrState = _useState4[0],
    setQRState = _useState4[1]; // state of QRCode
  var _useState5 = (0, _react2.useState)(''),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    qrMsg = _useState6[0],
    setQRMsg = _useState6[1]; // message of QRCode error

  var current = walletRepo === null || walletRepo === void 0 ? void 0 : walletRepo.current;
  current === null || current === void 0 ? void 0 : (_current$client = current.client) === null || _current$client === void 0 ? void 0 : (_current$client$setAc = _current$client.setActions) === null || _current$client$setAc === void 0 ? void 0 : _current$client$setAc.call(_current$client, {
    qrUrl: {
      state: setQRState,
      message: setQRMsg
    }
  });
  var walletStatus = current === null || current === void 0 ? void 0 : current.walletStatus;
  var message = current === null || current === void 0 ? void 0 : current.message;
  (0, _react2.useEffect)(function () {
    if (isOpen) {
      switch (walletStatus) {
        case _core.WalletStatus.Connecting:
          if (qrState === _core.State.Init) {
            setCurrentView(_core.ModalView.Connecting);
          } else {
            setCurrentView(_core.ModalView.QRCode);
          }
          break;
        case _core.WalletStatus.Connected:
          setCurrentView(_core.ModalView.Connected);
          break;
        case _core.WalletStatus.Error:
          if (qrState === _core.State.Init) {
            setCurrentView(_core.ModalView.Error);
          } else {
            setCurrentView(_core.ModalView.QRCode);
          }
          break;
        case _core.WalletStatus.Rejected:
          setCurrentView(_core.ModalView.Rejected);
          break;
        case _core.WalletStatus.NotExist:
          setCurrentView(_core.ModalView.NotExist);
          break;
        case _core.WalletStatus.Disconnected:
          setCurrentView(_core.ModalView.WalletList);
          break;
        default:
          setCurrentView(_core.ModalView.WalletList);
          break;
      }
    }
  }, [isOpen, qrState, walletStatus, qrMsg, message]);
  var onCloseModal = (0, _react2.useCallback)(function () {
    setOpen(false);
    if (walletStatus === 'Connecting') {
      current === null || current === void 0 ? void 0 : current.disconnect();
    }
  }, [setOpen, walletStatus, current]);
  var onReturn = (0, _react2.useCallback)(function () {
    setCurrentView(_core.ModalView.WalletList);
  }, [setCurrentView]);
  var modalView = (0, _react2.useMemo)(function () {
    var ViewComponent;
    switch (currentView) {
      case _core.ModalView.WalletList:
        ViewComponent = modalViews["".concat(currentView)];
        var wallets = walletRepo !== null && walletRepo !== void 0 && walletRepo.isMobile && !includeAllWalletsOnMobile ? walletRepo === null || walletRepo === void 0 ? void 0 : walletRepo.wallets.filter(function (w) {
          return !w.walletInfo.mobileDisabled;
        }) : walletRepo === null || walletRepo === void 0 ? void 0 : walletRepo.wallets;
        return /*#__PURE__*/_react2["default"].createElement(ViewComponent, {
          onClose: onCloseModal,
          wallets: wallets || [],
          initialFocus: initialFocus
        });
      default:
        if (!current) return /*#__PURE__*/_react2["default"].createElement("div", null);
        ViewComponent = modalViews["".concat(currentView)];
        return /*#__PURE__*/_react2["default"].createElement(ViewComponent, {
          onClose: onCloseModal,
          onReturn: onReturn,
          wallet: current
        });
    }
  }, [currentView, onReturn, onCloseModal, current, qrState, walletStatus, walletRepo, message, qrMsg]);
  return /*#__PURE__*/_react2["default"].createElement(_react.SimpleConnectModal, {
    modalOpen: isOpen,
    modalOnClose: onCloseModal,
    modalView: modalView,
    initialRef: initialFocus
  });
};
exports.WalletModal = WalletModal;