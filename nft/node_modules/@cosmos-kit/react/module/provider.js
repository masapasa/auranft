import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import { Logger } from '@cosmos-kit/core';
import { ChainProvider as ChainProviderLite } from '@cosmos-kit/react-lite';
import React, { useCallback, useMemo } from 'react';
import { WalletModal } from '.';
import { ChakraProviderWithGivenTheme, ChakraProviderWithOuterTheme } from './modal/components';
import { defaultModalViews } from './modal/components/views';
export const ChainProvider = ({
  chains,
  assetLists,
  wallets,
  walletModal,
  modalTheme,
  modalViews,
  includeAllWalletsOnMobile = false,
  wrappedWithChakra = false,
  defaultNameService = 'icns',
  walletConnectOptions,
  signerOptions,
  endpointOptions,
  sessionOptions,
  logLevel = 'WARN',
  children
}) => {
  const logger = useMemo(() => new Logger(logLevel), []);
  if (wrappedWithChakra && modalTheme) {
    logger.warn('Your are suggesting there already been a Chakra Theme active in higher level (with `wrappedWithChakra` is true). `modalTheme` will not work in this case.');
  }
  const getChainProvider = modal => /*#__PURE__*/React.createElement(ChainProviderLite, {
    chains: chains,
    assetLists: assetLists,
    wallets: wallets,
    walletModal: modal,
    defaultNameService: defaultNameService,
    walletConnectOptions: walletConnectOptions,
    signerOptions: signerOptions,
    endpointOptions: endpointOptions,
    sessionOptions: sessionOptions,
    logLevel: logLevel
  }, children);
  if (walletModal) {
    logger.debug('Using provided wallet modal.');
    return getChainProvider(walletModal);
  }
  logger.debug('Using default wallet modal.');
  const defaultModal = useCallback(props => /*#__PURE__*/React.createElement(WalletModal, _extends({}, props, {
    modalViews: _objectSpread(_objectSpread({}, defaultModalViews), modalViews),
    includeAllWalletsOnMobile: includeAllWalletsOnMobile
  })), [defaultModalViews]);
  if (wrappedWithChakra) {
    logger.debug('Wrap with <ChakraProviderWithOuterTheme>.');
    return /*#__PURE__*/React.createElement(ChakraProviderWithOuterTheme, {
      logger: logger
    }, getChainProvider(defaultModal));
  } else {
    logger.debug('Wrap with <ChakraProviderWithGivenTheme>.');
    return /*#__PURE__*/React.createElement(ChakraProviderWithGivenTheme, {
      theme: modalTheme,
      logger: logger
    }, getChainProvider(defaultModal));
  }
};