import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import { SimpleDisplayWalletList, SimpleModalHead, SimpleModalView } from '@cosmology-ui/react';
import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
export const WalletListView = ({
  onClose,
  wallets,
  initialFocus
}) => {
  const defaultInitialFocus = useRef();
  const [isLargeScreen, setIsLargeScreen] = useState(true);
  const onWalletClicked = useCallback(wallet => {
    wallet.connect(true);
  }, []);
  useEffect(() => {
    const handleWindowResize = () => {
      if (window.innerWidth >= 768) {
        setIsLargeScreen(true);
      } else {
        setIsLargeScreen(false);
      }
    };
    handleWindowResize();
    window.addEventListener('resize', handleWindowResize);
    return () => {
      window.removeEventListener('resize', handleWindowResize);
    };
  }, []);
  const modalHead = /*#__PURE__*/React.createElement(SimpleModalHead, {
    title: "Select your wallet",
    backButton: false,
    onClose: onClose
  });
  const walletsData = useMemo(() => wallets.sort((a, b) => {
    if (a.walletInfo.mode === b.walletInfo.mode) {
      return 0;
    } else if (a.walletInfo.mode !== 'wallet-connect') {
      return -1;
    } else {
      return 1;
    }
  }).map((w, i) => _objectSpread(_objectSpread({}, w.walletInfo), {}, {
    downloads: void 0,
    onClick: async () => {
      onWalletClicked(w);
    },
    buttonShape: i < 2 && isLargeScreen ? 'Square' : 'Rectangle',
    subLogo: w.walletInfo.mode === 'wallet-connect' ? 'https://user-images.githubusercontent.com/545047/202090621-bb110635-f6ce-4aa0-a4e5-a03beac29bd1.svg' : void 0
  })), [wallets, isLargeScreen]);
  const modalContent = /*#__PURE__*/React.createElement(SimpleDisplayWalletList, {
    initialFocus: initialFocus || defaultInitialFocus,
    walletsData: walletsData
  });
  return /*#__PURE__*/React.createElement(SimpleModalView, {
    modalHead: modalHead,
    modalContent: modalContent
  });
};