import { SimpleConnectModal } from '@cosmology-ui/react';
import { ModalView, State, WalletStatus } from '@cosmos-kit/core';
import React, { useCallback, useMemo, useEffect, useState, useRef } from 'react';
import { ChakraProviderWithGivenTheme } from './components';
import { defaultModalViews } from './components/views';
export const DefaultModal = ({
  isOpen,
  setOpen,
  walletRepo
}) => {
  return /*#__PURE__*/React.createElement(ChakraProviderWithGivenTheme, null, /*#__PURE__*/React.createElement(WalletModal, {
    isOpen: isOpen,
    setOpen: setOpen,
    walletRepo: walletRepo,
    modalViews: defaultModalViews
  }));
};
export const WalletModal = ({
  isOpen,
  setOpen,
  walletRepo,
  modalViews,
  includeAllWalletsOnMobile
}) => {
  const initialFocus = useRef();
  const [currentView, setCurrentView] = useState(ModalView.WalletList);
  const [qrState, setQRState] = useState(State.Init); // state of QRCode
  const [qrMsg, setQRMsg] = useState(''); // message of QRCode error

  const current = walletRepo?.current;
  current?.client?.setActions?.({
    qrUrl: {
      state: setQRState,
      message: setQRMsg
    }
  });
  const walletStatus = current?.walletStatus;
  const message = current?.message;
  useEffect(() => {
    if (isOpen) {
      switch (walletStatus) {
        case WalletStatus.Connecting:
          if (qrState === State.Init) {
            setCurrentView(ModalView.Connecting);
          } else {
            setCurrentView(ModalView.QRCode);
          }
          break;
        case WalletStatus.Connected:
          setCurrentView(ModalView.Connected);
          break;
        case WalletStatus.Error:
          if (qrState === State.Init) {
            setCurrentView(ModalView.Error);
          } else {
            setCurrentView(ModalView.QRCode);
          }
          break;
        case WalletStatus.Rejected:
          setCurrentView(ModalView.Rejected);
          break;
        case WalletStatus.NotExist:
          setCurrentView(ModalView.NotExist);
          break;
        case WalletStatus.Disconnected:
          setCurrentView(ModalView.WalletList);
          break;
        default:
          setCurrentView(ModalView.WalletList);
          break;
      }
    }
  }, [isOpen, qrState, walletStatus, qrMsg, message]);
  const onCloseModal = useCallback(() => {
    setOpen(false);
    if (walletStatus === 'Connecting') {
      current?.disconnect();
    }
  }, [setOpen, walletStatus, current]);
  const onReturn = useCallback(() => {
    setCurrentView(ModalView.WalletList);
  }, [setCurrentView]);
  const modalView = useMemo(() => {
    let ViewComponent;
    switch (currentView) {
      case ModalView.WalletList:
        ViewComponent = modalViews[`${currentView}`];
        const wallets = walletRepo?.isMobile && !includeAllWalletsOnMobile ? walletRepo?.wallets.filter(w => !w.walletInfo.mobileDisabled) : walletRepo?.wallets;
        return /*#__PURE__*/React.createElement(ViewComponent, {
          onClose: onCloseModal,
          wallets: wallets || [],
          initialFocus: initialFocus
        });
      default:
        if (!current) return /*#__PURE__*/React.createElement("div", null);
        ViewComponent = modalViews[`${currentView}`];
        return /*#__PURE__*/React.createElement(ViewComponent, {
          onClose: onCloseModal,
          onReturn: onReturn,
          wallet: current
        });
    }
  }, [currentView, onReturn, onCloseModal, current, qrState, walletStatus, walletRepo, message, qrMsg]);
  return /*#__PURE__*/React.createElement(SimpleConnectModal, {
    modalOpen: isOpen,
    modalOnClose: onCloseModal,
    modalView: modalView,
    initialRef: initialFocus
  });
};