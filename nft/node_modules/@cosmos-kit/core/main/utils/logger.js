"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function wrap(logLevel, message) {
  switch (logLevel) {
    case 'ERROR':
      return ["%c".concat(logLevel, " -"), 'color: Red;', message];
    case 'WARN':
      return ["%c".concat(logLevel, " -"), 'color: Orange;', message];
    case 'INFO':
      return ["%c".concat(logLevel, " -"), 'color: Blue;', message];
    case 'DEBUG':
      return ["%c".concat(logLevel, " -"), 'color: Purple;', message];
    case 'TRACE':
      return ["%c".concat(logLevel, " -"), 'color: Brown;', message];
  }
}
var Logger = /*#__PURE__*/function () {
  function Logger() {
    var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'INFO';
    (0, _classCallCheck2["default"])(this, Logger);
    (0, _defineProperty2["default"])(this, "logger", void 0);
    (0, _defineProperty2["default"])(this, "level", void 0);
    (0, _defineProperty2["default"])(this, "levelOrder", ['TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR']);
    this.logger = console;
    this.level = level;
  }
  (0, _createClass2["default"])(Logger, [{
    key: "compare",
    value: function compare(a, b) {
      var aindex = this.levelOrder.indexOf(a);
      var bindex = this.levelOrder.indexOf(b);
      if (aindex > bindex) {
        return 1;
      } else if (aindex < bindex) {
        return -1;
      } else {
        return 0;
      }
    }
  }, {
    key: "trace",
    value: function trace(message) {
      if (this.compare('TRACE', this.level) >= 0) {
        var _this$logger;
        for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          optionalParams[_key - 1] = arguments[_key];
        }
        (_this$logger = this.logger).trace.apply(_this$logger, (0, _toConsumableArray2["default"])(wrap('TRACE', message)).concat(optionalParams));
      }
    }
  }, {
    key: "debug",
    value: function debug(message) {
      if (this.compare('DEBUG', this.level) >= 0) {
        var _this$logger2;
        for (var _len2 = arguments.length, optionalParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          optionalParams[_key2 - 1] = arguments[_key2];
        }
        (_this$logger2 = this.logger).debug.apply(_this$logger2, (0, _toConsumableArray2["default"])(wrap('DEBUG', message)).concat(optionalParams));
      }
    }
  }, {
    key: "info",
    value: function info(message) {
      if (this.compare('INFO', this.level) >= 0) {
        var _this$logger3;
        for (var _len3 = arguments.length, optionalParams = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          optionalParams[_key3 - 1] = arguments[_key3];
        }
        (_this$logger3 = this.logger).info.apply(_this$logger3, (0, _toConsumableArray2["default"])(wrap('INFO', message)).concat(optionalParams));
      }
    }
  }, {
    key: "warn",
    value: function warn(message) {
      if (this.compare('WARN', this.level) >= 0) {
        var _this$logger4;
        for (var _len4 = arguments.length, optionalParams = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          optionalParams[_key4 - 1] = arguments[_key4];
        }
        (_this$logger4 = this.logger).warn.apply(_this$logger4, (0, _toConsumableArray2["default"])(wrap('WARN', message)).concat(optionalParams));
      }
    }
  }, {
    key: "error",
    value: function error(message) {
      if (this.compare('ERROR', this.level) >= 0) {
        var _this$logger5;
        for (var _len5 = arguments.length, optionalParams = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          optionalParams[_key5 - 1] = arguments[_key5];
        }
        (_this$logger5 = this.logger).error.apply(_this$logger5, (0, _toConsumableArray2["default"])(wrap('ERROR', message)).concat(optionalParams));
      }
    }
  }]);
  return Logger;
}();
exports.Logger = Logger;