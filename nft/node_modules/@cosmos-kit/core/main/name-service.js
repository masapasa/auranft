"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NameService = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var NameService = /*#__PURE__*/function () {
  function NameService(client, registry) {
    (0, _classCallCheck2["default"])(this, NameService);
    (0, _defineProperty2["default"])(this, "client", void 0);
    (0, _defineProperty2["default"])(this, "registry", void 0);
    this.client = client;
    this.registry = registry;
  }
  (0, _createClass2["default"])(NameService, [{
    key: "resolveName",
    value: function () {
      var _resolveName = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(address) {
        var _this$registry, contract, getQueryMsg, result, _console;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _this$registry = this.registry, contract = _this$registry.contract, getQueryMsg = _this$registry.getQueryMsg;
              _context.next = 4;
              return this.client.queryContractSmart(contract, getQueryMsg(address));
            case 4:
              result = _context.sent;
              return _context.abrupt("return", result);
            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              (_console = console) === null || _console === void 0 ? void 0 : _console.error(_context.t0);
              return _context.abrupt("return", undefined);
            case 12:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[0, 8]]);
      }));
      function resolveName(_x) {
        return _resolveName.apply(this, arguments);
      }
      return resolveName;
    }()
  }]);
  return NameService;
}();
exports.NameService = NameService;