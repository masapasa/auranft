"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertBaseUnitsToDisplayUnits = convertBaseUnitsToDisplayUnits;
exports.convertBaseUnitsToDollarValue = convertBaseUnitsToDollarValue;
exports.convertCoinGeckoPricesToDenomPriceMap = convertCoinGeckoPricesToDenomPriceMap;
exports.convertDollarValueToDenomUnits = convertDollarValueToDenomUnits;
exports.getAssetByDenom = getAssetByDenom;
exports.getChainDenomBySymbol = getChainDenomBySymbol;
exports.getDenomByCoinGeckoId = getDenomByCoinGeckoId;
exports.getExponentByDenom = getExponentByDenom;
exports.getSymbolByChainDenom = getSymbolByChainDenom;
exports.noDecimals = noDecimals;
var _bignumber = _interopRequireDefault(require("bignumber.js"));
function getAssetByDenom(assets, denom) {
  var asset = assets.find(function (asset) {
    return asset.base === denom;
  });
  if (!asset) {
    throw new Error("Asset not found: ".concat(denom));
  }
  return asset;
}
function getDenomByCoinGeckoId(assets, coinGeckoId) {
  return assets.find(function (asset) {
    return asset.coingecko_id === coinGeckoId;
  }).base;
}
function getSymbolByChainDenom(assets, denom) {
  var asset = getAssetByDenom(assets, denom);
  var symbol = asset.symbol;
  if (!symbol) {
    return denom;
  }
  return symbol;
}
function getChainDenomBySymbol(assets, token) {
  var asset = assets.find(function (_ref) {
    var symbol = _ref.symbol;
    return symbol === token;
  });
  var base = asset === null || asset === void 0 ? void 0 : asset.base;
  if (!base) {
    console.log("cannot find base for token ".concat(token));
    return null;
  }
  return base;
}
function getExponentByDenom(assets, denom) {
  var asset = getAssetByDenom(assets, denom);
  var unit = asset.denom_units.find(function (_ref2) {
    var denom = _ref2.denom;
    return denom === asset.display;
  });
  return (unit === null || unit === void 0 ? void 0 : unit.exponent) || 0;
}
function convertCoinGeckoPricesToDenomPriceMap(assets, prices) {
  return Object.keys(prices).reduce(function (res, geckoId) {
    var denom = getDenomByCoinGeckoId(assets, geckoId);
    res[denom] = prices[geckoId].usd;
    return res;
  }, {});
}
function noDecimals(num) {
  return new _bignumber["default"](num).decimalPlaces(0, _bignumber["default"].ROUND_DOWN).toString();
}
function convertBaseUnitsToDollarValue(assets, prices, symbol, amount) {
  var denom = getChainDenomBySymbol(assets, symbol);
  return new _bignumber["default"](amount).shiftedBy(-getExponentByDenom(assets, denom)).multipliedBy(prices[denom]).toString();
}
function convertDollarValueToDenomUnits(assets, prices, symbol, value) {
  var denom = getChainDenomBySymbol(assets, symbol);
  return new _bignumber["default"](value).dividedBy(prices[denom]).shiftedBy(getExponentByDenom(assets, denom)).toString();
}
function convertBaseUnitsToDisplayUnits(assets, symbol, amount) {
  var denom = getChainDenomBySymbol(assets, symbol);
  return new _bignumber["default"](amount).shiftedBy(-getExponentByDenom(assets, denom)).toString();
}