"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chainRegistryChainToKeplr = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _cosmos = require("@keplr-wallet/cosmos");
var _semver = _interopRequireDefault(require("semver"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var getRpc = function getRpc(chain) {
  var _chain$apis, _chain$apis$rpc$;
  return (_chain$apis = chain.apis) === null || _chain$apis === void 0 ? void 0 : (_chain$apis$rpc$ = _chain$apis.rpc[0]) === null || _chain$apis$rpc$ === void 0 ? void 0 : _chain$apis$rpc$.address;
};
var getRest = function getRest(chain) {
  var _chain$apis2, _chain$apis2$rest$;
  return (_chain$apis2 = chain.apis) === null || _chain$apis2 === void 0 ? void 0 : (_chain$apis2$rest$ = _chain$apis2.rest[0]) === null || _chain$apis2$rest$ === void 0 ? void 0 : _chain$apis2$rest$.address;
};
var getExplr = function getExplr(chain) {
  var _chain$explorers, _chain$explorers$;
  return (_chain$explorers = chain.explorers) === null || _chain$explorers === void 0 ? void 0 : (_chain$explorers$ = _chain$explorers[0]) === null || _chain$explorers$ === void 0 ? void 0 : _chain$explorers$.url;
};
var cleanVer = function cleanVer(ver) {
  if (!_semver["default"].valid(ver)) {
    var spaces = ver.split('.').length;
    switch (spaces) {
      case 1:
        return ver + '.0.0';
      case 2:
        return ver + '.0';
      case 3:
      default:
        throw new Error('contact maintainers: bad version');
    }
  }
};
var chainRegistryChainToKeplr = function chainRegistryChainToKeplr(chain, assets) {
  var _chain$codebase$cosmo, _chain$codebase, _chain$codebase2, _assets$find, _chain$fees, _chain$fees2, _chain$fees2$fee_toke, _chain$staking, _currencies$find;
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    getRpcEndpoint: getRpc,
    getRestEndpoint: getRest,
    getExplorer: getExplr
  };
  if (!options.getRestEndpoint) options.getRestEndpoint = getRest;
  if (!options.getRpcEndpoint) options.getRpcEndpoint = getRpc;
  if (!options.getExplorer) options.getExplorer = getExplr;
  var features = [];
  // if NOT specified, we assume stargate, sorry not sorry
  var sdkVer = cleanVer((_chain$codebase$cosmo = (_chain$codebase = chain.codebase) === null || _chain$codebase === void 0 ? void 0 : _chain$codebase.cosmos_sdk_version) !== null && _chain$codebase$cosmo !== void 0 ? _chain$codebase$cosmo : '0.4');
  // stargate
  if (_semver["default"].satisfies(sdkVer, '>=0.4')) features.push('stargate');
  // no-legacy-stdTx
  if (_semver["default"].satisfies(sdkVer, '>=0.43')) features.push('no-legacy-stdTx');
  // until further notice, assume 'ibc-transfer'
  features.push('ibc-transfer');

  // ibc-go
  if (_semver["default"].satisfies(sdkVer, '>=0.45')) features.push('ibc-go');
  if ((_chain$codebase2 = chain.codebase) !== null && _chain$codebase2 !== void 0 && _chain$codebase2.cosmwasm_enabled) {
    var _chain$codebase$cosmw;
    features.push('cosmwasm');
    var wasmVer = cleanVer((_chain$codebase$cosmw = chain.codebase.cosmwasm_version) !== null && _chain$codebase$cosmw !== void 0 ? _chain$codebase$cosmw : '0.24');
    if (_semver["default"].satisfies(wasmVer, '>=0.24')) features.push('wasmd_0.24+');
  }
  var chainAssets = ((_assets$find = assets.find(function (asset) {
    return asset.chain_name === chain.chain_name;
  })) === null || _assets$find === void 0 ? void 0 : _assets$find.assets) || [];
  var feeDenoms = ((_chain$fees = chain.fees) === null || _chain$fees === void 0 ? void 0 : _chain$fees.fee_tokens.map(function (feeToken) {
    return feeToken.denom;
  })) || [];

  /**
   * FROM KEPLR chain-info.d.ts:
   * This is used to set the fee of the transaction.
   * If this field is empty, it just use the default gas price step (low: 0.01, average: 0.025, high: 0.04).
   * And, set field's type as primitive number because it is hard to restore the prototype after deserialzing if field's type is `Dec`.
   */
  var gasPriceSteps = (_chain$fees2 = chain.fees) === null || _chain$fees2 === void 0 ? void 0 : (_chain$fees2$fee_toke = _chain$fees2.fee_tokens) === null || _chain$fees2$fee_toke === void 0 ? void 0 : _chain$fees2$fee_toke.reduce(function (m, feeToken) {
    var _feeToken$low_gas_pri, _feeToken$average_gas, _feeToken$high_gas_pr;
    m[feeToken.denom] = {
      low: (_feeToken$low_gas_pri = feeToken.low_gas_price) !== null && _feeToken$low_gas_pri !== void 0 ? _feeToken$low_gas_pri : 0.01,
      average: (_feeToken$average_gas = feeToken.average_gas_price) !== null && _feeToken$average_gas !== void 0 ? _feeToken$average_gas : 0.025,
      high: (_feeToken$high_gas_pr = feeToken.high_gas_price) !== null && _feeToken$high_gas_pr !== void 0 ? _feeToken$high_gas_pr : 0.04
    };
    return m;
  }, {});
  var stakingDenoms = ((_chain$staking = chain.staking) === null || _chain$staking === void 0 ? void 0 : _chain$staking.staking_tokens.map(function (stakingToken) {
    return stakingToken.denom;
  })) || [];
  var currencies = chainAssets.map(function (currency) {
    var _currency$denom_units, _currency$logo_URIs$s, _currency$logo_URIs, _currency$logo_URIs2;
    return {
      coinDenom: currency.symbol,
      coinMinimalDenom: currency.base,
      coinDecimals: (_currency$denom_units = currency.denom_units.filter(function (denomUnit) {
        return denomUnit.denom === currency.display;
      })[0]) === null || _currency$denom_units === void 0 ? void 0 : _currency$denom_units.exponent,
      coinGeckoId: currency.coingecko_id,
      coinImageUrl: (_currency$logo_URIs$s = (_currency$logo_URIs = currency.logo_URIs) === null || _currency$logo_URIs === void 0 ? void 0 : _currency$logo_URIs.svg) !== null && _currency$logo_URIs$s !== void 0 ? _currency$logo_URIs$s : (_currency$logo_URIs2 = currency.logo_URIs) === null || _currency$logo_URIs2 === void 0 ? void 0 : _currency$logo_URIs2.png
    };
  });
  var stakeCurrency = (_currencies$find = currencies.find(function (currency) {
    return stakingDenoms.includes(currency.coinDenom);
  })) !== null && _currencies$find !== void 0 ? _currencies$find : currencies[0];
  var feeCurrencies = currencies
  // USE THE FEE DENOMS
  .filter(function (currency) {
    return feeDenoms.includes(currency.coinMinimalDenom);
  }).map(function (feeCurrency) {
    if (!gasPriceSteps.hasOwnProperty(feeCurrency.coinMinimalDenom)) return feeCurrency;

    // has gas
    var gasPriceStep = gasPriceSteps[feeCurrency.coinMinimalDenom];
    return _objectSpread(_objectSpread({}, feeCurrency), {}, {
      gasPriceStep: gasPriceStep
    });
  });
  var feeCurrenciesDefault = currencies
  // USE THE STAKE CURRENCY
  .filter(function (currency) {
    return stakeCurrency.coinDenom === currency.coinDenom;
  }).map(function (feeCurrency) {
    if (!gasPriceSteps.hasOwnProperty(feeCurrency.coinMinimalDenom)) return feeCurrency;

    // has gas
    var gasPriceStep = gasPriceSteps[feeCurrency.coinMinimalDenom];
    return _objectSpread(_objectSpread({}, feeCurrency), {}, {
      gasPriceStep: gasPriceStep
    });
  });
  var chainInfo = {
    rpc: options.getRpcEndpoint(chain),
    rest: options.getRestEndpoint(chain),
    chainId: chain.chain_id,
    chainName: chain.pretty_name,
    bip44: {
      coinType: chain.slip44
    },
    bech32Config: _cosmos.Bech32Address.defaultBech32Config(chain.bech32_prefix),
    currencies: currencies,
    stakeCurrency: stakeCurrency || currencies[0],
    feeCurrencies: feeCurrencies.length !== 0 ? feeCurrencies : feeCurrenciesDefault,
    features: features
  };
  return chainInfo;
};
exports.chainRegistryChainToKeplr = chainRegistryChainToKeplr;