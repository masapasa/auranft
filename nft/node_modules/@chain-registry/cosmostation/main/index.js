"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chainRegistryChainToCosmostation = void 0;
var _utils = require("@chain-registry/utils");
var getRest = function getRest(chain) {
  var _chain$apis, _chain$apis$rest$;
  return (_chain$apis = chain.apis) === null || _chain$apis === void 0 ? void 0 : (_chain$apis$rest$ = _chain$apis.rest[0]) === null || _chain$apis$rest$ === void 0 ? void 0 : _chain$apis$rest$.address;
};

// chainId: string;
// chainName: string;
// restURL: string;
// imageURL?: string;
// baseDenom: string;
// displayDenom: string;
// decimals?: number;
// coinType?: string;
// addressPrefix: string;
// coinGeckoId?: string;
// gasRate?: GasRate;
// sendGas?: string;
// type?: CosmosType;

var chainRegistryChainToCosmostation = function chainRegistryChainToCosmostation(chain, assets) {
  var _assets$find, _chain$staking, _currencies$find;
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    getRestEndpoint: getRest
  };
  if (!options.getRestEndpoint) options.getRestEndpoint = getRest;
  var chainAssets = ((_assets$find = assets.find(function (asset) {
    return asset.chain_name === chain.chain_name;
  })) === null || _assets$find === void 0 ? void 0 : _assets$find.assets) || [];
  var stakingDenoms = ((_chain$staking = chain.staking) === null || _chain$staking === void 0 ? void 0 : _chain$staking.staking_tokens.map(function (stakingToken) {
    return stakingToken.denom;
  })) || [];
  var currencies = chainAssets.map(function (currency) {
    var _currency$logo_URIs$s, _currency$logo_URIs, _currency$logo_URIs2;
    return {
      displayDenom: currency.symbol,
      baseDenom: currency.base,
      coinGeckoId: currency.coingecko_id,
      imageURL: (_currency$logo_URIs$s = (_currency$logo_URIs = currency.logo_URIs) === null || _currency$logo_URIs === void 0 ? void 0 : _currency$logo_URIs.svg) !== null && _currency$logo_URIs$s !== void 0 ? _currency$logo_URIs$s : (_currency$logo_URIs2 = currency.logo_URIs) === null || _currency$logo_URIs2 === void 0 ? void 0 : _currency$logo_URIs2.png
    };
  });
  var stakeCurrency = (_currencies$find = currencies.find(function (currency) {
    return stakingDenoms.includes(currency.baseDenom);
  })) !== null && _currencies$find !== void 0 ? _currencies$find : currencies[0];
  var gasPriceStep = (0, _utils.getGasPriceStep)(chain);
  var chainInfo = {
    chainId: chain.chain_id,
    chainName: chain.pretty_name,
    restURL: options.getRestEndpoint(chain),
    imageURL: stakeCurrency.imageURL,
    baseDenom: stakeCurrency.baseDenom,
    displayDenom: stakeCurrency.displayDenom,
    coinType: chain.slip44.toString(),
    addressPrefix: chain.bech32_prefix,
    coinGeckoId: currencies[0].coinGeckoId,
    gasRate: {
      // optional (default: { average: '0.025', low: '0.0025', tiny: '0.00025' })
      average: gasPriceStep.average.toString(),
      low: gasPriceStep.low.toString(),
      tiny: '0.00025'
    }
    // TODO implement type
    // type: '' | 'ETHERMINT'
  };

  return chainInfo;
};
exports.chainRegistryChainToCosmostation = chainRegistryChainToCosmostation;