/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { AdminResponse, Addr, MemberListResponse, MemberResponse } from "./Splits.types";
export interface SplitsReadOnlyInterface {
    contractAddress: string;
    admin: () => Promise<AdminResponse>;
    group: () => Promise<Addr>;
    member: ({ address }: {
        address: string;
    }) => Promise<MemberResponse>;
    listMembers: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<MemberListResponse>;
}
export declare class SplitsQueryClient implements SplitsReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    admin: () => Promise<AdminResponse>;
    group: () => Promise<Addr>;
    member: ({ address }: {
        address: string;
    }) => Promise<MemberResponse>;
    listMembers: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<MemberListResponse>;
}
export interface SplitsInterface extends SplitsReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateAdmin: ({ admin }: {
        admin?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    distribute: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class SplitsClient extends SplitsQueryClient implements SplitsInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateAdmin: ({ admin }: {
        admin?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    distribute: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
