/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { Timestamp, SaleType, Coin } from "./Marketplace.types";
export interface MarketplaceMessage {
    contractAddress: string;
    sender: string;
    setAsk: ({ collection, expires, findersFeeBps, fundsRecipient, price, reserveFor, saleType, tokenId }: {
        collection: string;
        expires: Timestamp;
        findersFeeBps?: number;
        fundsRecipient?: string;
        price: Coin;
        reserveFor?: string;
        saleType: SaleType;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeAsk: ({ collection, tokenId }: {
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateAskPrice: ({ collection, price, tokenId }: {
        collection: string;
        price: Coin;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setBid: ({ collection, expires, finder, findersFeeBps, saleType, tokenId }: {
        collection: string;
        expires: Timestamp;
        finder?: string;
        findersFeeBps?: number;
        saleType: SaleType;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    buyNow: ({ collection, expires, finder, findersFeeBps, tokenId }: {
        collection: string;
        expires: Timestamp;
        finder?: string;
        findersFeeBps?: number;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeBid: ({ collection, tokenId }: {
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    acceptBid: ({ bidder, collection, finder, tokenId }: {
        bidder: string;
        collection: string;
        finder?: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    rejectBid: ({ bidder, collection, tokenId }: {
        bidder: string;
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setCollectionBid: ({ collection, expires, findersFeeBps }: {
        collection: string;
        expires: Timestamp;
        findersFeeBps?: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeCollectionBid: ({ collection }: {
        collection: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    acceptCollectionBid: ({ bidder, collection, finder, tokenId }: {
        bidder: string;
        collection: string;
        finder?: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    syncAsk: ({ collection, tokenId }: {
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeStaleAsk: ({ collection, tokenId }: {
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeStaleBid: ({ bidder, collection, tokenId }: {
        bidder: string;
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeStaleCollectionBid: ({ bidder, collection }: {
        bidder: string;
        collection: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class MarketplaceMessageComposer implements MarketplaceMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    setAsk: ({ collection, expires, findersFeeBps, fundsRecipient, price, reserveFor, saleType, tokenId }: {
        collection: string;
        expires: Timestamp;
        findersFeeBps?: number;
        fundsRecipient?: string;
        price: Coin;
        reserveFor?: string;
        saleType: SaleType;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeAsk: ({ collection, tokenId }: {
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateAskPrice: ({ collection, price, tokenId }: {
        collection: string;
        price: Coin;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setBid: ({ collection, expires, finder, findersFeeBps, saleType, tokenId }: {
        collection: string;
        expires: Timestamp;
        finder?: string;
        findersFeeBps?: number;
        saleType: SaleType;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    buyNow: ({ collection, expires, finder, findersFeeBps, tokenId }: {
        collection: string;
        expires: Timestamp;
        finder?: string;
        findersFeeBps?: number;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeBid: ({ collection, tokenId }: {
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    acceptBid: ({ bidder, collection, finder, tokenId }: {
        bidder: string;
        collection: string;
        finder?: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    rejectBid: ({ bidder, collection, tokenId }: {
        bidder: string;
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setCollectionBid: ({ collection, expires, findersFeeBps }: {
        collection: string;
        expires: Timestamp;
        findersFeeBps?: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeCollectionBid: ({ collection }: {
        collection: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    acceptCollectionBid: ({ bidder, collection, finder, tokenId }: {
        bidder: string;
        collection: string;
        finder?: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    syncAsk: ({ collection, tokenId }: {
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeStaleAsk: ({ collection, tokenId }: {
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeStaleBid: ({ bidder, collection, tokenId }: {
        bidder: string;
        collection: string;
        tokenId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeStaleCollectionBid: ({ bidder, collection }: {
        bidder: string;
        collection: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
