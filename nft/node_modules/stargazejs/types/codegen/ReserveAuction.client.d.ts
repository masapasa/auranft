/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Coin, Timestamp, QueryOptionsForTupleOfStringAndString, QueryOptionsForTupleOfuint64AndTupleOfStringAndString, AuctionResponse, AuctionsResponse, ConfigResponse } from "./ReserveAuction.types";
export interface ReserveAuctionReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    auction: ({ collection, tokenId }: {
        collection: string;
        tokenId: string;
    }) => Promise<AuctionResponse>;
    auctionsBySeller: ({ queryOptions, seller }: {
        queryOptions?: QueryOptionsForTupleOfStringAndString;
        seller: string;
    }) => Promise<AuctionsResponse>;
    auctionsByEndTime: ({ endTime, queryOptions }: {
        endTime: Timestamp;
        queryOptions?: QueryOptionsForTupleOfuint64AndTupleOfStringAndString;
    }) => Promise<AuctionsResponse>;
}
export declare class ReserveAuctionQueryClient implements ReserveAuctionReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    auction: ({ collection, tokenId }: {
        collection: string;
        tokenId: string;
    }) => Promise<AuctionResponse>;
    auctionsBySeller: ({ queryOptions, seller }: {
        queryOptions?: QueryOptionsForTupleOfStringAndString;
        seller: string;
    }) => Promise<AuctionsResponse>;
    auctionsByEndTime: ({ endTime, queryOptions }: {
        endTime: Timestamp;
        queryOptions?: QueryOptionsForTupleOfuint64AndTupleOfStringAndString;
    }) => Promise<AuctionsResponse>;
}
export interface ReserveAuctionInterface extends ReserveAuctionReadOnlyInterface {
    contractAddress: string;
    sender: string;
    createAuction: ({ collection, endTime, reservePrice, sellerFundsRecipient, startTime, tokenId }: {
        collection: string;
        endTime: Timestamp;
        reservePrice: Coin;
        sellerFundsRecipient?: string;
        startTime: Timestamp;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateReservePrice: ({ collection, reservePrice, tokenId }: {
        collection: string;
        reservePrice: Coin;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    cancelAuction: ({ collection, tokenId }: {
        collection: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    placeBid: ({ collection, tokenId }: {
        collection: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    settleAuction: ({ collection, tokenId }: {
        collection: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class ReserveAuctionClient extends ReserveAuctionQueryClient implements ReserveAuctionInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    createAuction: ({ collection, endTime, reservePrice, sellerFundsRecipient, startTime, tokenId }: {
        collection: string;
        endTime: Timestamp;
        reservePrice: Coin;
        sellerFundsRecipient?: string;
        startTime: Timestamp;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateReservePrice: ({ collection, reservePrice, tokenId }: {
        collection: string;
        reservePrice: Coin;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    cancelAuction: ({ collection, tokenId }: {
        collection: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    placeBid: ({ collection, tokenId }: {
        collection: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    settleAuction: ({ collection, tokenId }: {
        collection: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
