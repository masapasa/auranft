"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LCDQueryClient = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var LCDQueryClient = /*#__PURE__*/function () {
  function LCDQueryClient(_ref) {
    var requestClient = _ref.requestClient;
    (0, _classCallCheck2["default"])(this, LCDQueryClient);
    (0, _defineProperty2["default"])(this, "req", void 0);
    this.req = requestClient;
    this.moduleAccountBalance = this.moduleAccountBalance.bind(this);
    this.params = this.params.bind(this);
    this.claimRecord = this.claimRecord.bind(this);
    this.claimableForAction = this.claimableForAction.bind(this);
    this.totalClaimable = this.totalClaimable.bind(this);
  }
  /* this line is used by starport scaffolding # 2 */
  (0, _createClass2["default"])(LCDQueryClient, [{
    key: "moduleAccountBalance",
    value: function () {
      var _moduleAccountBalance = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var _params,
          endpoint,
          _args = arguments;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                endpoint = "stargaze/claim/v1beta1/module_account_balance";
                _context.next = 4;
                return this.req.get(endpoint);
              case 4:
                return _context.abrupt("return", _context.sent);
              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function moduleAccountBalance() {
        return _moduleAccountBalance.apply(this, arguments);
      }
      return moduleAccountBalance;
    }() /* Params */
  }, {
    key: "params",
    value: function () {
      var _params2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var _params,
          endpoint,
          _args2 = arguments;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _params = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                endpoint = "stargaze/claim/v1beta1/params";
                _context2.next = 4;
                return this.req.get(endpoint);
              case 4:
                return _context2.abrupt("return", _context2.sent);
              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function params() {
        return _params2.apply(this, arguments);
      }
      return params;
    }() /* ClaimRecord */
  }, {
    key: "claimRecord",
    value: function () {
      var _claimRecord = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(params) {
        var endpoint;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                endpoint = "stargaze/claim/v1beta1/claim_record/".concat(params.address);
                _context3.next = 3;
                return this.req.get(endpoint);
              case 3:
                return _context3.abrupt("return", _context3.sent);
              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function claimRecord(_x) {
        return _claimRecord.apply(this, arguments);
      }
      return claimRecord;
    }() /* ClaimableForAction */
  }, {
    key: "claimableForAction",
    value: function () {
      var _claimableForAction = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(params) {
        var endpoint;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                endpoint = "stargaze/claim/v1beta1/claimable_for_action/".concat(params.address, "/").concat(params.action);
                _context4.next = 3;
                return this.req.get(endpoint);
              case 3:
                return _context4.abrupt("return", _context4.sent);
              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function claimableForAction(_x2) {
        return _claimableForAction.apply(this, arguments);
      }
      return claimableForAction;
    }() /* TotalClaimable */
  }, {
    key: "totalClaimable",
    value: function () {
      var _totalClaimable = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(params) {
        var endpoint;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                endpoint = "stargaze/claim/v1beta1/total_claimable/".concat(params.address);
                _context5.next = 3;
                return this.req.get(endpoint);
              case 3:
                return _context5.abrupt("return", _context5.sent);
              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function totalClaimable(_x3) {
        return _totalClaimable.apply(this, arguments);
      }
      return totalClaimable;
    }()
  }]);
  return LCDQueryClient;
}();
exports.LCDQueryClient = LCDQueryClient;