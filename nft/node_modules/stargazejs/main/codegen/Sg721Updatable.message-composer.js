"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sg721UpdatableMessageComposer = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _tx = require("cosmjs-types/cosmwasm/wasm/v1/tx");
var _encoding = require("@cosmjs/encoding");
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/var Sg721UpdatableMessageComposer = /*#__PURE__*/(0, _createClass2["default"])(function Sg721UpdatableMessageComposer(sender, contractAddress) {
  var _this = this;
  (0, _classCallCheck2["default"])(this, Sg721UpdatableMessageComposer);
  (0, _defineProperty2["default"])(this, "sender", void 0);
  (0, _defineProperty2["default"])(this, "contractAddress", void 0);
  (0, _defineProperty2["default"])(this, "freezeTokenMetadata", function (_funds) {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          freeze_token_metadata: {}
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "updateTokenMetadata", function (_ref, _funds) {
    var tokenId = _ref.tokenId,
      tokenUri = _ref.tokenUri;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          update_token_metadata: {
            token_id: tokenId,
            token_uri: tokenUri
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "enableUpdatable", function (_funds) {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          enable_updatable: {}
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "transferNft", function (_ref2, _funds) {
    var recipient = _ref2.recipient,
      tokenId = _ref2.tokenId;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          transfer_nft: {
            recipient: recipient,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "sendNft", function (_ref3, _funds) {
    var contract = _ref3.contract,
      msg = _ref3.msg,
      tokenId = _ref3.tokenId;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          send_nft: {
            contract: contract,
            msg: msg,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "approve", function (_ref4, _funds) {
    var expires = _ref4.expires,
      spender = _ref4.spender,
      tokenId = _ref4.tokenId;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          approve: {
            expires: expires,
            spender: spender,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "revoke", function (_ref5, _funds) {
    var spender = _ref5.spender,
      tokenId = _ref5.tokenId;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          revoke: {
            spender: spender,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "approveAll", function (_ref6, _funds) {
    var expires = _ref6.expires,
      operator = _ref6.operator;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          approve_all: {
            expires: expires,
            operator: operator
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "revokeAll", function (_ref7, _funds) {
    var operator = _ref7.operator;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          revoke_all: {
            operator: operator
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "burn", function (_ref8, _funds) {
    var tokenId = _ref8.tokenId;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          burn: {
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "updateCollectionInfo", function (_ref9, _funds) {
    var collectionInfo = _ref9.collectionInfo;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          update_collection_info: {
            collection_info: collectionInfo
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "updateTradingStartTime", function (_funds) {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          update_trading_start_time: {}
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "freezeCollectionInfo", function (_funds) {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          freeze_collection_info: {}
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "mint", function (_ref10, _funds) {
    var extension = _ref10.extension,
      owner = _ref10.owner,
      tokenId = _ref10.tokenId,
      tokenUri = _ref10.tokenUri;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          mint: {
            extension: extension,
            owner: owner,
            token_id: tokenId,
            token_uri: tokenUri
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "extension", function (_ref11, _funds) {
    var msg = _ref11.msg;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          extension: {
            msg: msg
          }
        })),
        funds: _funds
      })
    };
  });
  this.sender = sender;
  this.contractAddress = contractAddress;
  this.freezeTokenMetadata = this.freezeTokenMetadata.bind(this);
  this.updateTokenMetadata = this.updateTokenMetadata.bind(this);
  this.enableUpdatable = this.enableUpdatable.bind(this);
  this.transferNft = this.transferNft.bind(this);
  this.sendNft = this.sendNft.bind(this);
  this.approve = this.approve.bind(this);
  this.revoke = this.revoke.bind(this);
  this.approveAll = this.approveAll.bind(this);
  this.revokeAll = this.revokeAll.bind(this);
  this.burn = this.burn.bind(this);
  this.updateCollectionInfo = this.updateCollectionInfo.bind(this);
  this.updateTradingStartTime = this.updateTradingStartTime.bind(this);
  this.freezeCollectionInfo = this.freezeCollectionInfo.bind(this);
  this.mint = this.mint.bind(this);
  this.extension = this.extension.bind(this);
});
exports.Sg721UpdatableMessageComposer = Sg721UpdatableMessageComposer;