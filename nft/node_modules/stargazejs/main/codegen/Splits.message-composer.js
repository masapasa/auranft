"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SplitsMessageComposer = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _tx = require("cosmjs-types/cosmwasm/wasm/v1/tx");
var _encoding = require("@cosmjs/encoding");
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/var SplitsMessageComposer = /*#__PURE__*/(0, _createClass2["default"])(function SplitsMessageComposer(sender, contractAddress) {
  var _this = this;
  (0, _classCallCheck2["default"])(this, SplitsMessageComposer);
  (0, _defineProperty2["default"])(this, "sender", void 0);
  (0, _defineProperty2["default"])(this, "contractAddress", void 0);
  (0, _defineProperty2["default"])(this, "updateAdmin", function (_ref, _funds) {
    var admin = _ref.admin;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          update_admin: {
            admin: admin
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "distribute", function (_funds) {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          distribute: {}
        })),
        funds: _funds
      })
    };
  });
  this.sender = sender;
  this.contractAddress = contractAddress;
  this.updateAdmin = this.updateAdmin.bind(this);
  this.distribute = this.distribute.bind(this);
});
exports.SplitsMessageComposer = SplitsMessageComposer;