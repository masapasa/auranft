"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WhitelistImmutableQueryClient = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/var WhitelistImmutableQueryClient = /*#__PURE__*/(0, _createClass2["default"])(function WhitelistImmutableQueryClient(client, contractAddress) {
  var _this = this;
  (0, _classCallCheck2["default"])(this, WhitelistImmutableQueryClient);
  (0, _defineProperty2["default"])(this, "client", void 0);
  (0, _defineProperty2["default"])(this, "contractAddress", void 0);
  (0, _defineProperty2["default"])(this, "config", /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", _this.client.queryContractSmart(_this.contractAddress, {
              config: {}
            }));
          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  (0, _defineProperty2["default"])(this, "includesAddress", /*#__PURE__*/function () {
    var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(_ref2) {
      var address;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              address = _ref2.address;
              return _context2.abrupt("return", _this.client.queryContractSmart(_this.contractAddress, {
                includes_address: {
                  address: address
                }
              }));
            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }());
  (0, _defineProperty2["default"])(this, "admin", /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", _this.client.queryContractSmart(_this.contractAddress, {
              admin: {}
            }));
          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  (0, _defineProperty2["default"])(this, "addressCount", /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", _this.client.queryContractSmart(_this.contractAddress, {
              address_count: {}
            }));
          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  (0, _defineProperty2["default"])(this, "perAddressLimit", /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", _this.client.queryContractSmart(_this.contractAddress, {
              per_address_limit: {}
            }));
          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  })));
  this.client = client;
  this.contractAddress = contractAddress;
  this.config = this.config.bind(this);
  this.includesAddress = this.includesAddress.bind(this);
  this.admin = this.admin.bind(this);
  this.addressCount = this.addressCount.bind(this);
  this.perAddressLimit = this.perAddressLimit.bind(this);
});
exports.WhitelistImmutableQueryClient = WhitelistImmutableQueryClient;