"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReserveAuctionMessageComposer = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _tx = require("cosmjs-types/cosmwasm/wasm/v1/tx");
var _encoding = require("@cosmjs/encoding");
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/var ReserveAuctionMessageComposer = /*#__PURE__*/(0, _createClass2["default"])(function ReserveAuctionMessageComposer(sender, contractAddress) {
  var _this = this;
  (0, _classCallCheck2["default"])(this, ReserveAuctionMessageComposer);
  (0, _defineProperty2["default"])(this, "sender", void 0);
  (0, _defineProperty2["default"])(this, "contractAddress", void 0);
  (0, _defineProperty2["default"])(this, "createAuction", function (_ref, _funds) {
    var collection = _ref.collection,
      endTime = _ref.endTime,
      reservePrice = _ref.reservePrice,
      sellerFundsRecipient = _ref.sellerFundsRecipient,
      startTime = _ref.startTime,
      tokenId = _ref.tokenId;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          create_auction: {
            collection: collection,
            end_time: endTime,
            reserve_price: reservePrice,
            seller_funds_recipient: sellerFundsRecipient,
            start_time: startTime,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "updateReservePrice", function (_ref2, _funds) {
    var collection = _ref2.collection,
      reservePrice = _ref2.reservePrice,
      tokenId = _ref2.tokenId;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          update_reserve_price: {
            collection: collection,
            reserve_price: reservePrice,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "cancelAuction", function (_ref3, _funds) {
    var collection = _ref3.collection,
      tokenId = _ref3.tokenId;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          cancel_auction: {
            collection: collection,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "placeBid", function (_ref4, _funds) {
    var collection = _ref4.collection,
      tokenId = _ref4.tokenId;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          place_bid: {
            collection: collection,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  });
  (0, _defineProperty2["default"])(this, "settleAuction", function (_ref5, _funds) {
    var collection = _ref5.collection,
      tokenId = _ref5.tokenId;
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: _tx.MsgExecuteContract.fromPartial({
        sender: _this.sender,
        contract: _this.contractAddress,
        msg: (0, _encoding.toUtf8)(JSON.stringify({
          settle_auction: {
            collection: collection,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  });
  this.sender = sender;
  this.contractAddress = contractAddress;
  this.createAuction = this.createAuction.bind(this);
  this.updateReservePrice = this.updateReservePrice.bind(this);
  this.cancelAuction = this.cancelAuction.bind(this);
  this.placeBid = this.placeBid.bind(this);
  this.settleAuction = this.settleAuction.bind(this);
});
exports.ReserveAuctionMessageComposer = ReserveAuctionMessageComposer;