/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { InstantiateMsg, ExecuteMsg, Binary, Expiration, Timestamp, Uint64, Action, Empty, QueryMsg, AllNftInfoResponseForEmpty, OwnerOfResponse, Approval, NftInfoResponseForEmpty, OperatorsResponse, TokensResponse, ApprovalResponse, ApprovalsResponse, ContractInfoResponse, Null, MinterResponse, NumTokensResponse, OperatorResponse, OwnershipForString } from "./Cw721Base.types";
import { Cw721BaseQueryClient } from "./Cw721Base.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<Cw721BaseQueryClient, QueryClientParams>({
  key: "cw721BaseQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new Cw721BaseQueryClient(client, contractAddress);
  }
});
export const ownerOfSelector = selectorFamily<OwnerOfResponse, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["ownerOf"]>;
}>({
  key: "cw721BaseOwnerOf",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.ownerOf(...params);
  }
});
export const approvalSelector = selectorFamily<ApprovalResponse, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["approval"]>;
}>({
  key: "cw721BaseApproval",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.approval(...params);
  }
});
export const approvalsSelector = selectorFamily<ApprovalsResponse, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["approvals"]>;
}>({
  key: "cw721BaseApprovals",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.approvals(...params);
  }
});
export const operatorSelector = selectorFamily<OperatorResponse, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["operator"]>;
}>({
  key: "cw721BaseOperator",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.operator(...params);
  }
});
export const allOperatorsSelector = selectorFamily<OperatorsResponse, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["allOperators"]>;
}>({
  key: "cw721BaseAllOperators",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allOperators(...params);
  }
});
export const numTokensSelector = selectorFamily<NumTokensResponse, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["numTokens"]>;
}>({
  key: "cw721BaseNumTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.numTokens(...params);
  }
});
export const contractInfoSelector = selectorFamily<ContractInfoResponse, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["contractInfo"]>;
}>({
  key: "cw721BaseContractInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.contractInfo(...params);
  }
});
export const nftInfoSelector = selectorFamily<NftInfoResponseForEmpty, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["nftInfo"]>;
}>({
  key: "cw721BaseNftInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.nftInfo(...params);
  }
});
export const allNftInfoSelector = selectorFamily<AllNftInfoResponseForEmpty, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["allNftInfo"]>;
}>({
  key: "cw721BaseAllNftInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allNftInfo(...params);
  }
});
export const tokensSelector = selectorFamily<TokensResponse, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["tokens"]>;
}>({
  key: "cw721BaseTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.tokens(...params);
  }
});
export const allTokensSelector = selectorFamily<TokensResponse, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["allTokens"]>;
}>({
  key: "cw721BaseAllTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allTokens(...params);
  }
});
export const minterSelector = selectorFamily<MinterResponse, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["minter"]>;
}>({
  key: "cw721BaseMinter",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.minter(...params);
  }
});
export const extensionSelector = selectorFamily<Null, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["extension"]>;
}>({
  key: "cw721BaseExtension",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.extension(...params);
  }
});
export const ownershipSelector = selectorFamily<OwnershipForString, QueryClientParams & {
  params: Parameters<Cw721BaseQueryClient["ownership"]>;
}>({
  key: "cw721BaseOwnership",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.ownership(...params);
  }
});